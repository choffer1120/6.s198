{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/package.json","includedInParent":true,"mtime":1534047879038},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"vega-util","loc":{"line":4,"column":26}},{"name":"../../data","loc":{"line":5,"column":21}},{"name":"../../encoding","loc":{"line":6,"column":25}},{"name":"../../fielddef","loc":{"line":7,"column":25}},{"name":"../../mark","loc":{"line":8,"column":21}},{"name":"../../sort","loc":{"line":9,"column":21}},{"name":"../../util","loc":{"line":10,"column":21}},{"name":"../common","loc":{"line":11,"column":23}},{"name":"./area","loc":{"line":12,"column":21}},{"name":"./bar","loc":{"line":13,"column":20}},{"name":"./geoshape","loc":{"line":14,"column":25}},{"name":"./line","loc":{"line":15,"column":21}},{"name":"./point","loc":{"line":16,"column":22}},{"name":"./rect","loc":{"line":17,"column":21}},{"name":"./rule","loc":{"line":18,"column":21}},{"name":"./text","loc":{"line":19,"column":21}},{"name":"./tick","loc":{"line":20,"column":21}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar data_1 = require(\"../../data\");\nvar encoding_1 = require(\"../../encoding\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar mark_1 = require(\"../../mark\");\nvar sort_1 = require(\"../../sort\");\nvar util_1 = require(\"../../util\");\nvar common_1 = require(\"../common\");\nvar area_1 = require(\"./area\");\nvar bar_1 = require(\"./bar\");\nvar geoshape_1 = require(\"./geoshape\");\nvar line_1 = require(\"./line\");\nvar point_1 = require(\"./point\");\nvar rect_1 = require(\"./rect\");\nvar rule_1 = require(\"./rule\");\nvar text_1 = require(\"./text\");\nvar tick_1 = require(\"./tick\");\nvar markCompiler = {\n    area: area_1.area,\n    bar: bar_1.bar,\n    circle: point_1.circle,\n    geoshape: geoshape_1.geoshape,\n    line: line_1.line,\n    point: point_1.point,\n    rect: rect_1.rect,\n    rule: rule_1.rule,\n    square: point_1.square,\n    text: text_1.text,\n    tick: tick_1.tick,\n    trail: line_1.trail\n};\nfunction parseMarkGroup(model) {\n    if (util_1.contains([mark_1.LINE, mark_1.AREA, mark_1.TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nexports.parseMarkGroup = parseMarkGroup;\nvar FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    var details = pathGroupingFields(model.mark, model.encoding);\n    var pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: (details.length > 0 ? FACETED_PATH_PREFIX : '')\n    });\n    if (details.length > 0) { // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [{\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(data_1.MAIN),\n                        data: model.requestDataName(data_1.MAIN),\n                        groupby: details,\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }];\n    }\n    else {\n        return pathMarks;\n    }\n}\nfunction getSort(model) {\n    var encoding = model.encoding, stack = model.stack, mark = model.mark, markDef = model.markDef;\n    var order = encoding.order;\n    if (!vega_util_1.isArray(order) && fielddef_1.isValueDef(order)) {\n        return undefined;\n    }\n    else if ((vega_util_1.isArray(order) || fielddef_1.isFieldDef(order)) && !stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return common_1.sortParams(order, { expr: 'datum' });\n    }\n    else if (mark_1.isPathMark(mark)) {\n        // For both line and area, we sort values based on dimension by default\n        var dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];\n        if (fielddef_1.isFieldDef(dimensionChannelDef)) {\n            var s = dimensionChannelDef.sort;\n            var sortField = sort_1.isSortField(s) ?\n                fielddef_1.vgField({\n                    // FIXME: this op might not already exist?\n                    // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                    aggregate: encoding_1.isAggregate(model.encoding) ? s.op : undefined,\n                    field: s.field\n                }, { expr: 'datum' }) :\n                fielddef_1.vgField(dimensionChannelDef, {\n                    // For stack with imputation, we only have bin_mid\n                    binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                    expr: 'datum'\n                });\n            return {\n                field: sortField,\n                order: 'descending'\n            };\n        }\n        return undefined;\n    }\n    return undefined;\n}\nexports.getSort = getSort;\nfunction getMarkGroups(model, opt) {\n    if (opt === void 0) { opt = { fromPrefix: '' }; }\n    var mark = model.mark;\n    var clip = model.markDef.clip !== undefined ?\n        !!model.markDef.clip : scaleClip(model);\n    var style = common_1.getStyles(model.markDef);\n    var key = model.encoding.key;\n    var sort = getSort(model);\n    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\n    return [tslib_1.__assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort: sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(data_1.MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }, (postEncodingTransform ? {\n            transform: postEncodingTransform\n        } : {}))];\n}\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nfunction pathGroupingFields(mark, encoding) {\n    return util_1.keys(encoding).reduce(function (details, channel) {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'order':\n            case 'tooltip':\n            case 'href':\n            case 'x2':\n            case 'y2':\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area\n            case 'text':\n            case 'shape':\n                return details;\n            case 'detail':\n            case 'key':\n                var channelDef = encoding[channel];\n                if (channelDef) {\n                    (vega_util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (fieldDef) {\n                        if (!fieldDef.aggregate) {\n                            details.push(fielddef_1.vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, it should group lines.\n            /* tslint:disable */\n            // intentional fall through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n                // TODO strokeDashOffset:\n                /* tslint:enable */\n                var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(fielddef_1.vgField(fieldDef, {}));\n                }\n                return details;\n            default:\n                throw new Error(\"Bug: Channel \" + channel + \" unimplemented for line mark\");\n        }\n    }, []);\n}\nexports.pathGroupingFields = pathGroupingFields;\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    var xScale = model.getScaleComponent('x');\n    var yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) ||\n        (yScale && yScale.get('domainRaw')) ? true : false;\n}\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mark.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/mark/mark.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar data_1 = require(\"../../data\");\nvar encoding_1 = require(\"../../encoding\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar mark_1 = require(\"../../mark\");\nvar sort_1 = require(\"../../sort\");\nvar util_1 = require(\"../../util\");\nvar common_1 = require(\"../common\");\nvar area_1 = require(\"./area\");\nvar bar_1 = require(\"./bar\");\nvar geoshape_1 = require(\"./geoshape\");\nvar line_1 = require(\"./line\");\nvar point_1 = require(\"./point\");\nvar rect_1 = require(\"./rect\");\nvar rule_1 = require(\"./rule\");\nvar text_1 = require(\"./text\");\nvar tick_1 = require(\"./tick\");\nvar markCompiler = {\n    area: area_1.area,\n    bar: bar_1.bar,\n    circle: point_1.circle,\n    geoshape: geoshape_1.geoshape,\n    line: line_1.line,\n    point: point_1.point,\n    rect: rect_1.rect,\n    rule: rule_1.rule,\n    square: point_1.square,\n    text: text_1.text,\n    tick: tick_1.tick,\n    trail: line_1.trail\n};\nfunction parseMarkGroup(model) {\n    if (util_1.contains([mark_1.LINE, mark_1.AREA, mark_1.TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nexports.parseMarkGroup = parseMarkGroup;\nvar FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    var details = pathGroupingFields(model.mark, model.encoding);\n    var pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: (details.length > 0 ? FACETED_PATH_PREFIX : '')\n    });\n    if (details.length > 0) { // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [{\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(data_1.MAIN),\n                        data: model.requestDataName(data_1.MAIN),\n                        groupby: details,\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }];\n    }\n    else {\n        return pathMarks;\n    }\n}\nfunction getSort(model) {\n    var encoding = model.encoding, stack = model.stack, mark = model.mark, markDef = model.markDef;\n    var order = encoding.order;\n    if (!vega_util_1.isArray(order) && fielddef_1.isValueDef(order)) {\n        return undefined;\n    }\n    else if ((vega_util_1.isArray(order) || fielddef_1.isFieldDef(order)) && !stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return common_1.sortParams(order, { expr: 'datum' });\n    }\n    else if (mark_1.isPathMark(mark)) {\n        // For both line and area, we sort values based on dimension by default\n        var dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];\n        if (fielddef_1.isFieldDef(dimensionChannelDef)) {\n            var s = dimensionChannelDef.sort;\n            var sortField = sort_1.isSortField(s) ?\n                fielddef_1.vgField({\n                    // FIXME: this op might not already exist?\n                    // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                    aggregate: encoding_1.isAggregate(model.encoding) ? s.op : undefined,\n                    field: s.field\n                }, { expr: 'datum' }) :\n                fielddef_1.vgField(dimensionChannelDef, {\n                    // For stack with imputation, we only have bin_mid\n                    binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                    expr: 'datum'\n                });\n            return {\n                field: sortField,\n                order: 'descending'\n            };\n        }\n        return undefined;\n    }\n    return undefined;\n}\nexports.getSort = getSort;\nfunction getMarkGroups(model, opt) {\n    if (opt === void 0) { opt = { fromPrefix: '' }; }\n    var mark = model.mark;\n    var clip = model.markDef.clip !== undefined ?\n        !!model.markDef.clip : scaleClip(model);\n    var style = common_1.getStyles(model.markDef);\n    var key = model.encoding.key;\n    var sort = getSort(model);\n    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\n    return [tslib_1.__assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort: sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(data_1.MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }, (postEncodingTransform ? {\n            transform: postEncodingTransform\n        } : {}))];\n}\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nfunction pathGroupingFields(mark, encoding) {\n    return util_1.keys(encoding).reduce(function (details, channel) {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'order':\n            case 'tooltip':\n            case 'href':\n            case 'x2':\n            case 'y2':\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area\n            case 'text':\n            case 'shape':\n                return details;\n            case 'detail':\n            case 'key':\n                var channelDef = encoding[channel];\n                if (channelDef) {\n                    (vega_util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (fieldDef) {\n                        if (!fieldDef.aggregate) {\n                            details.push(fielddef_1.vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, it should group lines.\n            /* tslint:disable */\n            // intentional fall through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n                // TODO strokeDashOffset:\n                /* tslint:enable */\n                var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(fielddef_1.vgField(fieldDef, {}));\n                }\n                return details;\n            default:\n                throw new Error(\"Bug: Channel \" + channel + \" unimplemented for line mark\");\n        }\n    }, []);\n}\nexports.pathGroupingFields = pathGroupingFields;\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    var xScale = model.getScaleComponent('x');\n    var yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) ||\n        (yScale && yScale.get('domainRaw')) ? true : false;\n}\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":199}},"hash":"8e2cfd8238882c725f9b57545afc3fa4","cacheData":{"env":{}}}