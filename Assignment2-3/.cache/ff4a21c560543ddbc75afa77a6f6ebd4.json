{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/mnist/package.json","includedInParent":true,"mtime":1532028279835},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"vega-util","loc":{"line":3,"column":26}},{"name":"../../channel","loc":{"line":4,"column":24}},{"name":"../../log","loc":{"line":5,"column":18}},{"name":"../../scale","loc":{"line":7,"column":22}},{"name":"../../util","loc":{"line":8,"column":19}},{"name":"../../vega.schema","loc":{"line":9,"column":28}},{"name":"../model","loc":{"line":10,"column":22}},{"name":"../split","loc":{"line":11,"column":22}},{"name":"./properties","loc":{"line":12,"column":27}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar scale_2 = require(\"../../scale\");\nvar util = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar properties_1 = require(\"./properties\");\nexports.RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nfunction parseScaleRange(model) {\n    if (model_1.isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        properties_1.parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexports.parseScaleRange = parseScaleRange;\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    channel_1.SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && vega_schema_1.isVgRangeStep(xRange) && vega_util_1.isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && vega_schema_1.isVgRangeStep(yRange) && vega_util_1.isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nfunction parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = exports.RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scale_1.scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return split_1.makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return split_1.makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return split_1.makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return split_1.makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nexports.parseRangeForChannel = parseRangeForChannel;\nfunction parseScheme(scheme) {\n    if (scale_1.isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case channel_1.X:\n        case channel_1.Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === channel_1.X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === channel_1.Y && scale_2.hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case channel_1.SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case channel_1.SHAPE:\n            return 'symbol';\n        case channel_1.COLOR:\n        case channel_1.FILL:\n        case channel_1.STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case channel_1.OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nexports.defaultRange = defaultRange;\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zY2FsZS9yYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFtQztBQUVuQyx5Q0FBcUg7QUFFckgsK0JBQWlDO0FBRWpDLHFDQVNxQjtBQUNyQixxQ0FBZ0Q7QUFFaEQsaUNBQW1DO0FBQ25DLGlEQUFtRTtBQUNuRSxrQ0FBNEM7QUFDNUMsa0NBQThEO0FBRzlELDJDQUF1RDtBQUsxQyxRQUFBLGdCQUFnQixHQUFvQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFHbEYseUJBQWdDLEtBQVk7SUFDMUMsSUFBSSxtQkFBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCO1NBQU07UUFDTCxzQ0FBeUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDM0M7QUFDSCxDQUFDO0FBTkQsMENBTUM7QUFFRCw2QkFBNkIsS0FBZ0I7SUFDM0MsSUFBTSxvQkFBb0IsR0FBd0IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFFekUsZ0ZBQWdGO0lBQ2hGLHdCQUFjLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBcUI7UUFDM0MsSUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNuQixPQUFPO1NBQ1I7UUFDRCxJQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHekQsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXpDLDRDQUE0QztRQUM1QyxJQUFNLFFBQVEsR0FB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QyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO1FBQ3pCLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQztLQUM5QjtJQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsNkNBQTZDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzTnVtYmVyfSBmcm9tICd2ZWdhLXV0aWwnO1xuXG5pbXBvcnQge0NoYW5uZWwsIENPTE9SLCBGSUxMLCBPUEFDSVRZLCBTQ0FMRV9DSEFOTkVMUywgU2NhbGVDaGFubmVsLCBTSEFQRSwgU0laRSwgU1RST0tFLCBYLCBZfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge01hcmt9IGZyb20gJy4uLy4uL21hcmsnO1xuaW1wb3J0IHtcbiAgY2hhbm5lbFNjYWxlUHJvcGVydHlJbmNvbXBhdGFiaWxpdHksXG4gIGlzRXh0ZW5kZWRTY2hlbWUsXG4gIFJhbmdlLFxuICBTY2FsZSxcbiAgU2NhbGVDb25maWcsXG4gIFNjYWxlVHlwZSxcbiAgc2NhbGVUeXBlU3VwcG9ydFByb3BlcnR5LFxuICBTY2hlbWUsXG59IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbn0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge2lzVmdSYW5nZVN0ZXAsIFZnUmFuZ2UsIFZnU2NoZW1lfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzVW5pdE1vZGVsLCBNb2RlbH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtFeHBsaWNpdCwgbWFrZUV4cGxpY2l0LCBtYWtlSW1wbGljaXR9IGZyb20gJy4uL3NwbGl0JztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7U2NhbGVDb21wb25lbnRJbmRleH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtwYXJzZU5vblVuaXRTY2FsZVByb3BlcnR5fSBmcm9tICcuL3Byb3BlcnRpZXMnO1xuXG5cbmV4cG9ydCB0eXBlIFJhbmdlTWl4aW5zID0ge3JhbmdlOiBSYW5nZX0gfCB7cmFuZ2VTdGVwOiBudW1iZXJ9IHwge3NjaGVtZTogU2NoZW1lfTtcblxuZXhwb3J0IGNvbnN0IFJBTkdFX1BST1BFUlRJRVM6IChrZXlvZiBTY2FsZSlbXSA9IFsncmFuZ2UnLCAncmFuZ2VTdGVwJywgJ3NjaGVtZSddO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNjYWxlUmFuZ2UobW9kZWw6IE1vZGVsKSB7XG4gIGlmIChpc1VuaXRNb2RlbChtb2RlbCkpIHtcbiAgICBwYXJzZVVuaXRTY2FsZVJhbmdlKG1vZGVsKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJzZU5vblVuaXRTY2FsZVByb3BlcnR5KG1vZGVsLCAncmFuZ2UnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXRTY2FsZVJhbmdlKG1vZGVsOiBVbml0TW9kZWwpIHtcbiAgY29uc3QgbG9jYWxTY2FsZUNvbXBvbmVudHM6IFNjYWxlQ29tcG9uZW50SW5kZXggPSBtb2RlbC5jb21wb25lbnQuc2NhbGVzO1xuXG4gIC8vIHVzZSBTQ0FMRV9DSEFOTkVMUyBpbnN0ZWFkIG9mIHNjYWxlc1tjaGFubmVsXSB0byBlbnN1cmUgdGhhdCB4LCB5IGNvbWUgZmlyc3QhXG4gIFNDQUxFX0NIQU5ORUxTLmZvckVhY2goKGNoYW5uZWw6IFNjYWxlQ2hhbm5lbCkgPT4ge1xuICAgIGNvbnN0IGxvY2FsU2NhbGVDbXB0ID0gbG9jYWxTY2FsZUNvbXBvbmVudHNbY2hhbm5lbF07XG4gICAgaWYgKCFsb2NhbFNjYWxlQ21wdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWRTY2FsZUNtcHQgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChjaGFubmVsKTtcblxuXG4gICAgY29uc3Qgc3BlY2lmaWVkU2NhbGUgPSBtb2RlbC5zcGVjaWZpZWRTY2FsZXNbY2hhbm5lbF07XG4gICAgY29uc3QgZmllbGREZWYgPSBtb2RlbC5maWVsZERlZihjaGFubmVsKTtcblxuICAgIC8vIFJlYWQgaWYgdGhlcmUgaXMgYSBzcGVjaWZpZWQgd2lkdGgvaGVpZ2h0XG4gICAgY29uc3Qgc2l6ZVR5cGUgPSBjaGFubmVsID09PSAneCcgPyAnd2lkdGgnIDogY2hhbm5lbCA9PT0gJ3knID8gJ2hlaWdodCcgOiB1bmRlZmluZWQ7XG4gICAgbGV0IHNpemVTcGVjaWZpZWQgPSBzaXplVHlwZSA/ICEhbW9kZWwuY29tcG9uZW50LmxheW91dFNpemUuZ2V0KHNpemVUeXBlKSA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHNjYWxlVHlwZSA9IG1lcmdlZFNjYWxlQ21wdC5nZXQoJ3R5cGUnKTtcblxuICAgIC8vIGlmIGF1dG9zaXplIGlzIGZpdCwgc2l6ZSBjYW5ub3QgYmUgZGF0YSBkcml2ZW5cbiAgICBjb25zdCByYW5nZVN0ZXAgPSB1dGlsLmNvbnRhaW5zKFsncG9pbnQnLCAnYmFuZCddLCBzY2FsZVR5cGUpIHx8ICEhc3BlY2lmaWVkU2NhbGUucmFuZ2VTdGVwO1xuICAgIGlmIChzaXplVHlwZSAmJiBtb2RlbC5maXQgJiYgIXNpemVTcGVjaWZpZWQgJiYgcmFuZ2VTdGVwKSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5DQU5OT1RfRklYX1JBTkdFX1NURVBfV0lUSF9GSVQpO1xuICAgICAgc2l6ZVNwZWNpZmllZCA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgeHlSYW5nZVN0ZXBzID0gZ2V0WFlSYW5nZVN0ZXAobW9kZWwpO1xuXG4gICAgY29uc3QgcmFuZ2VXaXRoRXhwbGljaXQgPSBwYXJzZVJhbmdlRm9yQ2hhbm5lbChcbiAgICAgIGNoYW5uZWwsIHNjYWxlVHlwZSwgZmllbGREZWYudHlwZSwgc3BlY2lmaWVkU2NhbGUsIG1vZGVsLmNvbmZpZyxcbiAgICAgIGxvY2FsU2NhbGVDbXB0LmdldCgnemVybycpLCBtb2RlbC5tYXJrLCBzaXplU3BlY2lmaWVkLCBtb2RlbC5nZXROYW1lKHNpemVUeXBlKSwgeHlSYW5nZVN0ZXBzXG4gICAgKTtcblxuICAgIGxvY2FsU2NhbGVDbXB0LnNldFdpdGhFeHBsaWNpdCgncmFuZ2UnLCByYW5nZVdpdGhFeHBsaWNpdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRYWVJhbmdlU3RlcChtb2RlbDogVW5pdE1vZGVsKSB7XG4gIGNvbnN0IHh5UmFuZ2VTdGVwczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCB4U2NhbGUgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudCgneCcpO1xuICBjb25zdCB4UmFuZ2UgPSB4U2NhbGUgJiYgeFNjYWxlLmdldCgncmFuZ2UnKTtcbiAgaWYgKHhSYW5nZSAmJiBpc1ZnUmFuZ2VTdGVwKHhSYW5nZSkgJiYgaXNOdW1iZXIoeFJhbmdlLnN0ZXApKSB7XG4gICAgeHlSYW5nZVN0ZXBzLnB1c2goeFJhbmdlLnN0ZXApO1xuICB9XG5cbiAgY29uc3QgeVNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoJ3knKTtcbiAgY29uc3QgeVJhbmdlID0geVNjYWxlICYmIHlTY2FsZS5nZXQoJ3JhbmdlJyk7XG4gIGlmICh5UmFuZ2UgJiYgaXNWZ1JhbmdlU3RlcCh5UmFuZ2UpICYmIGlzTnVtYmVyKHlSYW5nZS5zdGVwKSkge1xuICAgIHh5UmFuZ2VTdGVwcy5wdXNoKHlSYW5nZS5zdGVwKTtcbiAgfVxuXG4gIHJldHVybiB4eVJhbmdlU3RlcHM7XG59XG5cbi8qKlxuICogUmV0dXJuIG1peGlucyB0aGF0IGluY2x1ZGVzIG9uZSBvZiB0aGUgcmFuZ2UgcHJvcGVydGllcyAocmFuZ2UsIHJhbmdlU3RlcCwgc2NoZW1lKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmFuZ2VGb3JDaGFubmVsKFxuICAgIGNoYW5uZWw6IENoYW5uZWwsIHNjYWxlVHlwZTogU2NhbGVUeXBlLCB0eXBlOiBUeXBlLCBzcGVjaWZpZWRTY2FsZTogU2NhbGUsIGNvbmZpZzogQ29uZmlnLFxuICAgIHplcm86IGJvb2xlYW4sIG1hcms6IE1hcmssIHNpemVTcGVjaWZpZWQ6IGJvb2xlYW4sIHNpemVTaWduYWw6IHN0cmluZywgeHlSYW5nZVN0ZXBzOiBudW1iZXJbXVxuICApOiBFeHBsaWNpdDxWZ1JhbmdlPiB7XG5cbiAgY29uc3Qgbm9SYW5nZVN0ZXAgPSBzaXplU3BlY2lmaWVkIHx8IHNwZWNpZmllZFNjYWxlLnJhbmdlU3RlcCA9PT0gbnVsbDtcblxuICAvLyBDaGVjayBpZiBhbnkgb2YgdGhlIHJhbmdlIHByb3BlcnRpZXMgaXMgc3BlY2lmaWVkLlxuICAvLyBJZiBzbywgY2hlY2sgaWYgaXQgaXMgY29tcGF0aWJsZSBhbmQgbWFrZSBzdXJlIHRoYXQgd2Ugb25seSBvdXRwdXQgb25lIG9mIHRoZSBwcm9wZXJ0aWVzXG4gIGZvciAoY29uc3QgcHJvcGVydHkgb2YgUkFOR0VfUFJPUEVSVElFUykge1xuICAgIGlmIChzcGVjaWZpZWRTY2FsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3Qgc3VwcG9ydGVkQnlTY2FsZVR5cGUgPSBzY2FsZVR5cGVTdXBwb3J0UHJvcGVydHkoc2NhbGVUeXBlLCBwcm9wZXJ0eSk7XG4gICAgICBjb25zdCBjaGFubmVsSW5jb21wYXRhYmlsaXR5ID0gY2hhbm5lbFNjYWxlUHJvcGVydHlJbmNvbXBhdGFiaWxpdHkoY2hhbm5lbCwgcHJvcGVydHkpO1xuICAgICAgaWYgKCFzdXBwb3J0ZWRCeVNjYWxlVHlwZSkge1xuICAgICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5zY2FsZVByb3BlcnR5Tm90V29ya1dpdGhTY2FsZVR5cGUoc2NhbGVUeXBlLCBwcm9wZXJ0eSwgY2hhbm5lbCkpO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsSW5jb21wYXRhYmlsaXR5KSB7IC8vIGNoYW5uZWxcbiAgICAgICAgbG9nLndhcm4oY2hhbm5lbEluY29tcGF0YWJpbGl0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgcmV0dXJuIG1ha2VFeHBsaWNpdChzcGVjaWZpZWRTY2FsZVtwcm9wZXJ0eV0pO1xuICAgICAgICAgIGNhc2UgJ3NjaGVtZSc6XG4gICAgICAgICAgICByZXR1cm4gbWFrZUV4cGxpY2l0KHBhcnNlU2NoZW1lKHNwZWNpZmllZFNjYWxlW3Byb3BlcnR5XSkpO1xuICAgICAgICAgIGNhc2UgJ3JhbmdlU3RlcCc6XG4gICAgICAgICAgICBjb25zdCByYW5nZVN0ZXAgPSBzcGVjaWZpZWRTY2FsZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAocmFuZ2VTdGVwICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmICghc2l6ZVNwZWNpZmllZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXhwbGljaXQoe3N0ZXA6IHJhbmdlU3RlcH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIHRvcC1sZXZlbCBzaXplIGlzIHNwZWNpZmllZCwgd2UgaWdub3JlIHNwZWNpZmllZCByYW5nZVN0ZXAuXG4gICAgICAgICAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UucmFuZ2VTdGVwRHJvcHBlZChjaGFubmVsKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWFrZUltcGxpY2l0KFxuICAgIGRlZmF1bHRSYW5nZShcbiAgICAgIGNoYW5uZWwsIHNjYWxlVHlwZSwgdHlwZSwgY29uZmlnLFxuICAgICAgemVybywgbWFyaywgc2l6ZVNpZ25hbCwgeHlSYW5nZVN0ZXBzLCBub1JhbmdlU3RlcFxuICAgIClcbiAgKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTY2hlbWUoc2NoZW1lOiBTY2hlbWUpIHtcbiAgaWYgKGlzRXh0ZW5kZWRTY2hlbWUoc2NoZW1lKSkge1xuICAgIGNvbnN0IHI6IFZnU2NoZW1lID0ge3NjaGVtZTogc2NoZW1lLm5hbWV9O1xuICAgIGlmIChzY2hlbWUuY291bnQpIHtcbiAgICAgIHIuY291bnQgPSBzY2hlbWUuY291bnQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWUuZXh0ZW50KSB7XG4gICAgICByLmV4dGVudCA9IHNjaGVtZS5leHRlbnQ7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHJldHVybiB7c2NoZW1lOiBzY2hlbWV9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJhbmdlKFxuICBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSwgdHlwZTogVHlwZSwgY29uZmlnOiBDb25maWcsIHplcm86IGJvb2xlYW4sIG1hcms6IE1hcmssXG4gIHNpemVTaWduYWw6IHN0cmluZywgeHlSYW5nZVN0ZXBzOiBudW1iZXJbXSwgbm9SYW5nZVN0ZXA6IGJvb2xlYW5cbik6IFZnUmFuZ2Uge1xuICBzd2l0Y2ggKGNoYW5uZWwpIHtcbiAgICBjYXNlIFg6XG4gICAgY2FzZSBZOlxuICAgICAgaWYgKHV0aWwuY29udGFpbnMoWydwb2ludCcsICdiYW5kJ10sIHNjYWxlVHlwZSkgJiYgIW5vUmFuZ2VTdGVwKSB7XG4gICAgICAgIGlmIChjaGFubmVsID09PSBYICYmIG1hcmsgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGlmIChjb25maWcuc2NhbGUudGV4dFhSYW5nZVN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiB7c3RlcDogY29uZmlnLnNjYWxlLnRleHRYUmFuZ2VTdGVwfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5zY2FsZS5yYW5nZVN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiB7c3RlcDogY29uZmlnLnNjYWxlLnJhbmdlU3RlcH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHJhbmdlIHN0ZXAgaXMgbnVsbCwgdXNlIHplcm8gdG8gd2lkdGggb3IgaGVpZ2h0LlxuICAgICAgLy8gTm90ZSB0aGF0IHRoZXNlIHJhbmdlIHNpZ25hbHMgYXJlIHRlbXBvcmFyeVxuICAgICAgLy8gYXMgdGhleSBjYW4gYmUgbWVyZ2VkIGFuZCByZW5hbWVkLlxuICAgICAgLy8gKFdlIGRvIG5vdCBoYXZlIHRoZSByaWdodCBzaXplIHNpZ25hbCBoZXJlIHNpbmNlIHBhcnNlTGF5b3V0U2l6ZSgpIGhhcHBlbnMgYWZ0ZXIgcGFyc2VTY2FsZSgpLilcbiAgICAgIC8vIFdlIHdpbGwgbGF0ZXIgcmVwbGFjZSB0aGVzZSB0ZW1wb3JhcnkgbmFtZXMgd2l0aFxuICAgICAgLy8gdGhlIGZpbmFsIG5hbWUgaW4gYXNzZW1ibGVTY2FsZVJhbmdlKClcblxuICAgICAgaWYgKGNoYW5uZWwgPT09IFkgJiYgaGFzQ29udGludW91c0RvbWFpbihzY2FsZVR5cGUpKSB7XG4gICAgICAgIC8vIEZvciB5IGNvbnRpbnVvdXMgc2NhbGUsIHdlIGhhdmUgdG8gc3RhcnQgZnJvbSB0aGUgaGVpZ2h0IGFzIHRoZSBib3R0b20gcGFydCBoYXMgdGhlIG1heCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIFt7c2lnbmFsOiBzaXplU2lnbmFsfSwgMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzAsIHtzaWduYWw6IHNpemVTaWduYWx9XTtcbiAgICAgIH1cbiAgICBjYXNlIFNJWkU6XG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IGN1c3RvbSByYW5nZU1pbiwgcmFuZ2VNYXhcbiAgICAgIGNvbnN0IHJhbmdlTWluID0gc2l6ZVJhbmdlTWluKG1hcmssIHplcm8sIGNvbmZpZyk7XG4gICAgICBjb25zdCByYW5nZU1heCA9IHNpemVSYW5nZU1heChtYXJrLCB4eVJhbmdlU3RlcHMsIGNvbmZpZyk7XG4gICAgICByZXR1cm4gW3JhbmdlTWluLCByYW5nZU1heF07XG4gICAgY2FzZSBTSEFQRTpcbiAgICAgIHJldHVybiAnc3ltYm9sJztcbiAgICBjYXNlIENPTE9SOlxuICAgIGNhc2UgRklMTDpcbiAgICBjYXNlIFNUUk9LRTpcbiAgICAgIGlmIChzY2FsZVR5cGUgPT09ICdvcmRpbmFsJykge1xuICAgICAgICAvLyBPbmx5IG5vbWluYWwgZGF0YSB1c2VzIG9yZGluYWwgc2NhbGUgYnkgZGVmYXVsdFxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ25vbWluYWwnID8gJ2NhdGVnb3J5JyA6ICdvcmRpbmFsJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXJrID09PSAncmVjdCcgfHwgbWFyayA9PT0gJ2dlb3NoYXBlJyA/ICdoZWF0bWFwJyA6ICdyYW1wJztcbiAgICBjYXNlIE9QQUNJVFk6XG4gICAgICAvLyBUT0RPOiBzdXBwb3J0IGN1c3RvbSByYW5nZU1pbiwgcmFuZ2VNYXhcbiAgICAgIHJldHVybiBbY29uZmlnLnNjYWxlLm1pbk9wYWNpdHksIGNvbmZpZy5zY2FsZS5tYXhPcGFjaXR5XTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBTY2FsZSByYW5nZSB1bmRlZmluZWQgZm9yIGNoYW5uZWwgJHtjaGFubmVsfWApO1xufVxuXG5mdW5jdGlvbiBzaXplUmFuZ2VNaW4obWFyazogTWFyaywgemVybzogYm9vbGVhbiwgY29uZmlnOiBDb25maWcpIHtcbiAgaWYgKHplcm8pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBzd2l0Y2ggKG1hcmspIHtcbiAgICBjYXNlICdiYXInOlxuICAgIGNhc2UgJ3RpY2snOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5taW5CYW5kU2l6ZTtcbiAgICBjYXNlICdsaW5lJzpcbiAgICBjYXNlICd0cmFpbCc6XG4gICAgY2FzZSAncnVsZSc6XG4gICAgICByZXR1cm4gY29uZmlnLnNjYWxlLm1pblN0cm9rZVdpZHRoO1xuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5taW5Gb250U2l6ZTtcbiAgICBjYXNlICdwb2ludCc6XG4gICAgY2FzZSAnc3F1YXJlJzpcbiAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5taW5TaXplO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZSAqL1xuICAvLyBzaXplUmFuZ2VNaW4gbm90IGltcGxlbWVudGVkIGZvciB0aGUgbWFya1xuICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2UuaW5jb21wYXRpYmxlQ2hhbm5lbCgnc2l6ZScsIG1hcmspKTtcbn1cblxuZnVuY3Rpb24gc2l6ZVJhbmdlTWF4KG1hcms6IE1hcmssIHh5UmFuZ2VTdGVwczogbnVtYmVyW10sIGNvbmZpZzogQ29uZmlnKSB7XG4gIGNvbnN0IHNjYWxlQ29uZmlnID0gY29uZmlnLnNjYWxlO1xuICBzd2l0Y2ggKG1hcmspIHtcbiAgICBjYXNlICdiYXInOlxuICAgIGNhc2UgJ3RpY2snOlxuICAgICAgaWYgKGNvbmZpZy5zY2FsZS5tYXhCYW5kU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuc2NhbGUubWF4QmFuZFNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWluWFlSYW5nZVN0ZXAoeHlSYW5nZVN0ZXBzLCBjb25maWcuc2NhbGUpIC0gMTtcbiAgICBjYXNlICdsaW5lJzpcbiAgICBjYXNlICd0cmFpbCc6XG4gICAgY2FzZSAncnVsZSc6XG4gICAgICByZXR1cm4gY29uZmlnLnNjYWxlLm1heFN0cm9rZVdpZHRoO1xuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5tYXhGb250U2l6ZTtcbiAgICBjYXNlICdwb2ludCc6XG4gICAgY2FzZSAnc3F1YXJlJzpcbiAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgaWYgKGNvbmZpZy5zY2FsZS5tYXhTaXplKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuc2NhbGUubWF4U2l6ZTtcbiAgICAgIH1cblxuICAgICAgLy8gRklYTUUgdGhpcyBjYXNlIHRvdGFsbHkgc2hvdWxkIGJlIHJlZmFjdG9yZWRcbiAgICAgIGNvbnN0IHBvaW50U3RlcCA9IG1pblhZUmFuZ2VTdGVwKHh5UmFuZ2VTdGVwcywgc2NhbGVDb25maWcpO1xuICAgICAgcmV0dXJuIChwb2ludFN0ZXAgLSAyKSAqIChwb2ludFN0ZXAgLSAyKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUgKi9cbiAgLy8gc2l6ZVJhbmdlTWF4IG5vdCBpbXBsZW1lbnRlZCBmb3IgdGhlIG1hcmtcbiAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLmluY29tcGF0aWJsZUNoYW5uZWwoJ3NpemUnLCBtYXJrKSk7XG59XG5cbi8qKlxuICogQHJldHVybnMge251bWJlcn0gUmFuZ2Ugc3RlcCBvZiB4IG9yIHkgb3IgbWluaW11bSBiZXR3ZWVuIHRoZSB0d28gaWYgYm90aCBhcmUgb3JkaW5hbCBzY2FsZS5cbiAqL1xuZnVuY3Rpb24gbWluWFlSYW5nZVN0ZXAoeHlSYW5nZVN0ZXBzOiBudW1iZXJbXSwgc2NhbGVDb25maWc6IFNjYWxlQ29uZmlnKTogbnVtYmVyIHtcbiAgaWYgKHh5UmFuZ2VTdGVwcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIHh5UmFuZ2VTdGVwcyk7XG4gIH1cbiAgaWYgKHNjYWxlQ29uZmlnLnJhbmdlU3RlcCkge1xuICAgIHJldHVybiBzY2FsZUNvbmZpZy5yYW5nZVN0ZXA7XG4gIH1cbiAgcmV0dXJuIDIxOyAvLyBGSVhNRTogcmUtZXZhbHVhdGUgdGhlIGRlZmF1bHQgdmFsdWUgaGVyZS5cbn1cbiJdfQ==","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/scale/range.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar scale_2 = require(\"../../scale\");\nvar util = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar properties_1 = require(\"./properties\");\nexports.RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nfunction parseScaleRange(model) {\n    if (model_1.isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        properties_1.parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexports.parseScaleRange = parseScaleRange;\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    channel_1.SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && vega_schema_1.isVgRangeStep(xRange) && vega_util_1.isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && vega_schema_1.isVgRangeStep(yRange) && vega_util_1.isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nfunction parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = exports.RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scale_1.scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return split_1.makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return split_1.makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return split_1.makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return split_1.makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nexports.parseRangeForChannel = parseRangeForChannel;\nfunction parseScheme(scheme) {\n    if (scale_1.isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case channel_1.X:\n        case channel_1.Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === channel_1.X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === channel_1.Y && scale_2.hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case channel_1.SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case channel_1.SHAPE:\n            return 'symbol';\n        case channel_1.COLOR:\n        case channel_1.FILL:\n        case channel_1.STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case channel_1.OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nexports.defaultRange = defaultRange;\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":234}},"hash":"23e53c0cd075a5ac1c6981068579d8f6","cacheData":{"env":{}}}