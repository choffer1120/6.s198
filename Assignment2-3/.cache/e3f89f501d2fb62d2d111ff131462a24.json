{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/package.json","includedInParent":true,"mtime":1534047879038},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"vega-util","loc":{"line":7,"column":26}},{"name":"../../channel","loc":{"line":8,"column":24}},{"name":"../../fielddef","loc":{"line":9,"column":25}},{"name":"../../log","loc":{"line":10,"column":18}},{"name":"../../scale","loc":{"line":11,"column":22}},{"name":"../../type","loc":{"line":12,"column":21}},{"name":"../../util","loc":{"line":13,"column":21}},{"name":"../common","loc":{"line":14,"column":23}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * Utility files for producing Vega ValueRef for marks\n */\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar type_1 = require(\"../../type\");\nvar util_1 = require(\"../../util\");\nvar common_1 = require(\"../common\");\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for stackable x or y\n */\nfunction stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    if (fielddef_1.isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' });\n    }\n    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);\n}\nexports.stackable = stackable;\n/**\n * @return Vega ValueRef for stackable x2 or y2\n */\nfunction stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {\n    if (fielddef_1.isFieldDef(aFieldDef) && stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });\n    }\n    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);\n}\nexports.stackable2 = stackable2;\nfunction getOffset(channel, markDef) {\n    var offsetChannel = channel + 'Offset';\n    // TODO: in the future read from encoding channel too\n    var markDefOffsetValue = markDef[offsetChannel];\n    if (markDefOffsetValue) {\n        return markDefOffsetValue;\n    }\n    return undefined;\n}\nexports.getOffset = getOffset;\n/**\n * Value Ref for binned fields\n */\nfunction bin(fieldDef, scaleName, side, offset) {\n    var binSuffix = side === 'start' ? undefined : 'end';\n    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});\n}\nexports.bin = bin;\nfunction fieldRef(fieldDef, scaleName, opt, mixins) {\n    var ref = tslib_1.__assign({}, (scaleName ? { scale: scaleName } : {}), { field: fielddef_1.vgField(fieldDef, opt) });\n    if (mixins) {\n        return tslib_1.__assign({}, ref, mixins);\n    }\n    return ref;\n}\nexports.fieldRef = fieldRef;\nfunction bandRef(scaleName, band) {\n    if (band === void 0) { band = true; }\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\nexports.bandRef = bandRef;\n/**\n * Signal that returns the middle of a bin. Should only be used with x and y.\n */\nfunction binMidSignal(fieldDef, scaleName) {\n    return {\n        signal: \"(\" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + fielddef_1.vgField(fieldDef, { expr: 'datum' }) + \")\") +\n            \" + \" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + fielddef_1.vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + \")\") +\n            \")/2\"\n    };\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nfunction midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (fielddef_1.isFieldDef(channelDef)) {\n            if (channelDef.bin) {\n                // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                if (util_1.contains([channel_1.X, channel_1.Y], channel) && channelDef.type === type_1.QUANTITATIVE) {\n                    if (stack && stack.impute) {\n                        // For stack, we computed bin_mid so we can impute.\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });\n                    }\n                    // For non-stack, we can just calculate bin mid on the fly using signal.\n                    return binMidSignal(channelDef, scaleName);\n                }\n                return fieldRef(channelDef, scaleName, common_1.binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});\n            }\n            if (scale) {\n                var scaleType = scale.get('type');\n                if (scale_1.hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n        }\n        else if (fielddef_1.isValueDef(channelDef)) {\n            var value = channelDef.value;\n            if (util_1.contains(['x', 'x2'], channel) && value === 'width') {\n                return { field: { group: 'width' } };\n            }\n            else if (util_1.contains(['y', 'y2'], channel) && value === 'height') {\n                return { field: { group: 'height' } };\n            }\n            return { value: value };\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return defaultRef;\n}\nexports.midPoint = midPoint;\nfunction text(textDef, config) {\n    // text\n    if (textDef) {\n        if (fielddef_1.isFieldDef(textDef)) {\n            return common_1.formatSignalRef(textDef, textDef.format, 'datum', config);\n        }\n        else if (fielddef_1.isValueDef(textDef)) {\n            return { value: textDef.value };\n        }\n    }\n    return undefined;\n}\nexports.text = text;\nfunction mid(sizeRef) {\n    return tslib_1.__assign({}, sizeRef, { mult: 0.5 });\n}\nexports.mid = mid;\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale) {\n    if (scale.get('zero') !== false) {\n        return true;\n    }\n    var domains = scale.domains;\n    if (vega_util_1.isArray(domains)) {\n        return util_1.some(domains, function (d) { return vega_util_1.isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0; });\n    }\n    return false;\n}\nfunction getDefaultRef(defaultRef, channel, scaleName, scale, mark) {\n    if (vega_util_1.isString(defaultRef)) {\n        if (scaleName) {\n            var scaleType = scale.get('type');\n            if (util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scaleType)) {\n                // Log scales cannot have zero.\n                // Zero in time scale is arbitrary, and does not affect ratio.\n                // (Time is an interval level of measurement, not ratio).\n                // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType: scaleType }));\n                }\n            }\n            else {\n                if (domainDefinitelyIncludeZero(scale)) {\n                    return {\n                        scale: scaleName,\n                        value: 0\n                    };\n                }\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));\n                }\n            }\n        }\n        if (defaultRef === 'zeroOrMin') {\n            return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n        }\n        else { // zeroOrMax\n            return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n        }\n    }\n    return defaultRef;\n}\nexports.getDefaultRef = getDefaultRef;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/valueref.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/mark/valueref.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/**\n * Utility files for producing Vega ValueRef for marks\n */\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar type_1 = require(\"../../type\");\nvar util_1 = require(\"../../util\");\nvar common_1 = require(\"../common\");\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for stackable x or y\n */\nfunction stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    if (fielddef_1.isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' });\n    }\n    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);\n}\nexports.stackable = stackable;\n/**\n * @return Vega ValueRef for stackable x2 or y2\n */\nfunction stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {\n    if (fielddef_1.isFieldDef(aFieldDef) && stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });\n    }\n    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);\n}\nexports.stackable2 = stackable2;\nfunction getOffset(channel, markDef) {\n    var offsetChannel = channel + 'Offset';\n    // TODO: in the future read from encoding channel too\n    var markDefOffsetValue = markDef[offsetChannel];\n    if (markDefOffsetValue) {\n        return markDefOffsetValue;\n    }\n    return undefined;\n}\nexports.getOffset = getOffset;\n/**\n * Value Ref for binned fields\n */\nfunction bin(fieldDef, scaleName, side, offset) {\n    var binSuffix = side === 'start' ? undefined : 'end';\n    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});\n}\nexports.bin = bin;\nfunction fieldRef(fieldDef, scaleName, opt, mixins) {\n    var ref = tslib_1.__assign({}, (scaleName ? { scale: scaleName } : {}), { field: fielddef_1.vgField(fieldDef, opt) });\n    if (mixins) {\n        return tslib_1.__assign({}, ref, mixins);\n    }\n    return ref;\n}\nexports.fieldRef = fieldRef;\nfunction bandRef(scaleName, band) {\n    if (band === void 0) { band = true; }\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\nexports.bandRef = bandRef;\n/**\n * Signal that returns the middle of a bin. Should only be used with x and y.\n */\nfunction binMidSignal(fieldDef, scaleName) {\n    return {\n        signal: \"(\" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + fielddef_1.vgField(fieldDef, { expr: 'datum' }) + \")\") +\n            \" + \" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + fielddef_1.vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + \")\") +\n            \")/2\"\n    };\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nfunction midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (fielddef_1.isFieldDef(channelDef)) {\n            if (channelDef.bin) {\n                // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                if (util_1.contains([channel_1.X, channel_1.Y], channel) && channelDef.type === type_1.QUANTITATIVE) {\n                    if (stack && stack.impute) {\n                        // For stack, we computed bin_mid so we can impute.\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });\n                    }\n                    // For non-stack, we can just calculate bin mid on the fly using signal.\n                    return binMidSignal(channelDef, scaleName);\n                }\n                return fieldRef(channelDef, scaleName, common_1.binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});\n            }\n            if (scale) {\n                var scaleType = scale.get('type');\n                if (scale_1.hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n        }\n        else if (fielddef_1.isValueDef(channelDef)) {\n            var value = channelDef.value;\n            if (util_1.contains(['x', 'x2'], channel) && value === 'width') {\n                return { field: { group: 'width' } };\n            }\n            else if (util_1.contains(['y', 'y2'], channel) && value === 'height') {\n                return { field: { group: 'height' } };\n            }\n            return { value: value };\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return defaultRef;\n}\nexports.midPoint = midPoint;\nfunction text(textDef, config) {\n    // text\n    if (textDef) {\n        if (fielddef_1.isFieldDef(textDef)) {\n            return common_1.formatSignalRef(textDef, textDef.format, 'datum', config);\n        }\n        else if (fielddef_1.isValueDef(textDef)) {\n            return { value: textDef.value };\n        }\n    }\n    return undefined;\n}\nexports.text = text;\nfunction mid(sizeRef) {\n    return tslib_1.__assign({}, sizeRef, { mult: 0.5 });\n}\nexports.mid = mid;\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale) {\n    if (scale.get('zero') !== false) {\n        return true;\n    }\n    var domains = scale.domains;\n    if (vega_util_1.isArray(domains)) {\n        return util_1.some(domains, function (d) { return vega_util_1.isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0; });\n    }\n    return false;\n}\nfunction getDefaultRef(defaultRef, channel, scaleName, scale, mark) {\n    if (vega_util_1.isString(defaultRef)) {\n        if (scaleName) {\n            var scaleType = scale.get('type');\n            if (util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scaleType)) {\n                // Log scales cannot have zero.\n                // Zero in time scale is arbitrary, and does not affect ratio.\n                // (Time is an interval level of measurement, not ratio).\n                // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType: scaleType }));\n                }\n            }\n            else {\n                if (domainDefinitelyIncludeZero(scale)) {\n                    return {\n                        scale: scaleName,\n                        value: 0\n                    };\n                }\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));\n                }\n            }\n        }\n        if (defaultRef === 'zeroOrMin') {\n            return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n        }\n        else { // zeroOrMax\n            return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n        }\n    }\n    return defaultRef;\n}\nexports.getDefaultRef = getDefaultRef;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":200}},"hash":"a1281a911a4c4452ed2b29c9d8b41a33","cacheData":{"env":{}}}