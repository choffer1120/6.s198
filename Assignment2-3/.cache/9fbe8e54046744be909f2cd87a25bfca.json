{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/package.json","includedInParent":true,"mtime":1534047879038},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"vega-util","loc":{"line":4,"column":26}},{"name":"./channel","loc":{"line":5,"column":24}},{"name":"./fielddef","loc":{"line":6,"column":25}},{"name":"./log","loc":{"line":7,"column":18}},{"name":"./type","loc":{"line":8,"column":21}},{"name":"./util","loc":{"line":9,"column":21}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"./channel\");\nvar fielddef_1 = require(\"./fielddef\");\nvar log = require(\"./log\");\nvar type_1 = require(\"./type\");\nvar util_1 = require(\"./util\");\nfunction channelHasField(encoding, channel) {\n    var channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (vega_util_1.isArray(channelDef)) {\n            return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.field; });\n        }\n        else {\n            return fielddef_1.isFieldDef(channelDef) || fielddef_1.hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexports.channelHasField = channelHasField;\nfunction isAggregate(encoding) {\n    return util_1.some(channel_1.CHANNELS, function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            if (vega_util_1.isArray(channelDef)) {\n                return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.aggregate; });\n            }\n            else {\n                var fieldDef = fielddef_1.getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexports.isAggregate = isAggregate;\nfunction normalizeEncoding(encoding, mark) {\n    return util_1.keys(encoding).reduce(function (normalizedEncoding, channel) {\n        if (!channel_1.isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!channel_1.supportMark(channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        var channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !vega_util_1.isArray(channelDef) && !fielddef_1.isValueDef(channelDef)) ||\n            (channel === 'tooltip' && vega_util_1.isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (vega_util_1.isArray(channelDef) ? channelDef : [channelDef])\n                    .reduce(function (defs, fieldDef) {\n                    if (!fielddef_1.isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(fielddef_1.normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n            if (fieldDef && util_1.contains([type_1.Type.LATITUDE, type_1.Type.LONGITUDE], fieldDef.type)) {\n                var _a = channel, _ = normalizedEncoding[_a], newEncoding = tslib_1.__rest(normalizedEncoding, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n                var newChannel = channel === 'x' ? 'longitude' :\n                    channel === 'y' ? 'latitude' :\n                        channel === 'x2' ? 'longitude2' :\n                            channel === 'y2' ? 'latitude2' : undefined;\n                log.warn(log.message.latLongDeprecated(channel, fieldDef.type, newChannel));\n                return tslib_1.__assign({}, newEncoding, (_b = {}, _b[newChannel] = tslib_1.__assign({}, fielddef_1.normalize(fieldDef, channel), { type: 'quantitative' }), _b));\n            }\n            if (!fielddef_1.isFieldDef(channelDef) && !fielddef_1.isValueDef(channelDef) && !fielddef_1.isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = fielddef_1.normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n        var _b;\n    }, {});\n}\nexports.normalizeEncoding = normalizeEncoding;\nfunction isRanged(encoding) {\n    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\nexports.isRanged = isRanged;\nfunction fieldDefs(encoding) {\n    var arr = [];\n    channel_1.CHANNELS.forEach(function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (vega_util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (def) {\n                if (fielddef_1.isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (fielddef_1.hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            });\n        }\n    });\n    return arr;\n}\nexports.fieldDefs = fieldDefs;\nfunction forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    var _loop_1 = function (channel) {\n        if (vega_util_1.isArray(mapping[channel])) {\n            mapping[channel].forEach(function (channelDef) {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, mapping[channel], channel);\n        }\n    };\n    for (var _i = 0, _a = util_1.keys(mapping); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        _loop_1(channel);\n    }\n}\nexports.forEach = forEach;\nfunction reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return util_1.keys(mapping).reduce(function (r, channel) {\n        var map = mapping[channel];\n        if (vega_util_1.isArray(map)) {\n            return map.reduce(function (r1, channelDef) {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/encoding.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}}],"sources":{"node_modules/vega-lite/build/src/encoding.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"./channel\");\nvar fielddef_1 = require(\"./fielddef\");\nvar log = require(\"./log\");\nvar type_1 = require(\"./type\");\nvar util_1 = require(\"./util\");\nfunction channelHasField(encoding, channel) {\n    var channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (vega_util_1.isArray(channelDef)) {\n            return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.field; });\n        }\n        else {\n            return fielddef_1.isFieldDef(channelDef) || fielddef_1.hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexports.channelHasField = channelHasField;\nfunction isAggregate(encoding) {\n    return util_1.some(channel_1.CHANNELS, function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            if (vega_util_1.isArray(channelDef)) {\n                return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.aggregate; });\n            }\n            else {\n                var fieldDef = fielddef_1.getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexports.isAggregate = isAggregate;\nfunction normalizeEncoding(encoding, mark) {\n    return util_1.keys(encoding).reduce(function (normalizedEncoding, channel) {\n        if (!channel_1.isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!channel_1.supportMark(channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        var channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !vega_util_1.isArray(channelDef) && !fielddef_1.isValueDef(channelDef)) ||\n            (channel === 'tooltip' && vega_util_1.isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (vega_util_1.isArray(channelDef) ? channelDef : [channelDef])\n                    .reduce(function (defs, fieldDef) {\n                    if (!fielddef_1.isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(fielddef_1.normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            var fieldDef = fielddef_1.getFieldDef(encoding[channel]);\n            if (fieldDef && util_1.contains([type_1.Type.LATITUDE, type_1.Type.LONGITUDE], fieldDef.type)) {\n                var _a = channel, _ = normalizedEncoding[_a], newEncoding = tslib_1.__rest(normalizedEncoding, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n                var newChannel = channel === 'x' ? 'longitude' :\n                    channel === 'y' ? 'latitude' :\n                        channel === 'x2' ? 'longitude2' :\n                            channel === 'y2' ? 'latitude2' : undefined;\n                log.warn(log.message.latLongDeprecated(channel, fieldDef.type, newChannel));\n                return tslib_1.__assign({}, newEncoding, (_b = {}, _b[newChannel] = tslib_1.__assign({}, fielddef_1.normalize(fieldDef, channel), { type: 'quantitative' }), _b));\n            }\n            if (!fielddef_1.isFieldDef(channelDef) && !fielddef_1.isValueDef(channelDef) && !fielddef_1.isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = fielddef_1.normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n        var _b;\n    }, {});\n}\nexports.normalizeEncoding = normalizeEncoding;\nfunction isRanged(encoding) {\n    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\nexports.isRanged = isRanged;\nfunction fieldDefs(encoding) {\n    var arr = [];\n    channel_1.CHANNELS.forEach(function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (vega_util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (def) {\n                if (fielddef_1.isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (fielddef_1.hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            });\n        }\n    });\n    return arr;\n}\nexports.fieldDefs = fieldDefs;\nfunction forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    var _loop_1 = function (channel) {\n        if (vega_util_1.isArray(mapping[channel])) {\n            mapping[channel].forEach(function (channelDef) {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, mapping[channel], channel);\n        }\n    };\n    for (var _i = 0, _a = util_1.keys(mapping); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        _loop_1(channel);\n    }\n}\nexports.forEach = forEach;\nfunction reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return util_1.keys(mapping).reduce(function (r, channel) {\n        var map = mapping[channel];\n        if (vega_util_1.isArray(map)) {\n            return map.reduce(function (r1, channelDef) {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":163}},"hash":"9623b98c3cf1b4dfe0eb1e8a720ca265","cacheData":{"env":{}}}