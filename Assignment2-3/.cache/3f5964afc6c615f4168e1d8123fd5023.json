{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/package.json","includedInParent":true,"mtime":1534047879038},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"../../channel","loc":{"line":4,"column":24}},{"name":"../../log","loc":{"line":5,"column":18}},{"name":"../../scale","loc":{"line":6,"column":22}},{"name":"../../vega.schema","loc":{"line":7,"column":28}},{"name":"../scale/domain","loc":{"line":8,"column":23}},{"name":"./dataflow","loc":{"line":9,"column":25}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar domain_1 = require(\"../scale/domain\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(channel_1.COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(channel_1.COLUMN).bin) {\n                _this.columnFields.push(model.vgField(channel_1.COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(channel_1.ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(channel_1.ROW).bin) {\n                _this.rowFields.push(model.vgField(channel_1.ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {\n                    var domain = domain_1.assembleDomain(this.childModel, channel);\n                    var field = domain_1.getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [tslib_1.__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(dataflow_1.DataFlowNode));\nexports.FacetNode = FacetNode;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/data/facet.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar domain_1 = require(\"../scale/domain\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(channel_1.COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(channel_1.COLUMN).bin) {\n                _this.columnFields.push(model.vgField(channel_1.COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(channel_1.ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(channel_1.ROW).bin) {\n                _this.rowFields.push(model.vgField(channel_1.ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {\n                    var domain = domain_1.assembleDomain(this.childModel, channel);\n                    var field = domain_1.getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [tslib_1.__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(dataflow_1.DataFlowNode));\nexports.FacetNode = FacetNode;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":143}},"hash":"b4cd41a18223a15e0f0b267a8daf1d81","cacheData":{"env":{}}}