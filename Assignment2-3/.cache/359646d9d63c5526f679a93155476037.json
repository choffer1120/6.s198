{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/mnist/package.json","includedInParent":true,"mtime":1532028279835},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"vega-util","loc":{"line":3,"column":26}},{"name":"./util","loc":{"line":4,"column":21}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar util_1 = require(\"./util\");\nvar Mark;\n(function (Mark) {\n    Mark.AREA = 'area';\n    Mark.BAR = 'bar';\n    Mark.LINE = 'line';\n    Mark.POINT = 'point';\n    Mark.RECT = 'rect';\n    Mark.RULE = 'rule';\n    Mark.TEXT = 'text';\n    Mark.TICK = 'tick';\n    Mark.TRAIL = 'trail';\n    Mark.CIRCLE = 'circle';\n    Mark.SQUARE = 'square';\n    Mark.GEOSHAPE = 'geoshape';\n})(Mark = exports.Mark || (exports.Mark = {}));\nexports.AREA = Mark.AREA;\nexports.BAR = Mark.BAR;\nexports.LINE = Mark.LINE;\nexports.POINT = Mark.POINT;\nexports.TEXT = Mark.TEXT;\nexports.TICK = Mark.TICK;\nexports.TRAIL = Mark.TRAIL;\nexports.RECT = Mark.RECT;\nexports.RULE = Mark.RULE;\nexports.GEOSHAPE = Mark.GEOSHAPE;\nexports.CIRCLE = Mark.CIRCLE;\nexports.SQUARE = Mark.SQUARE;\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nvar MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nfunction isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexports.isMark = isMark;\nfunction isPathMark(m) {\n    return util_1.contains(['line', 'area', 'trail'], m);\n}\nexports.isPathMark = isPathMark;\nexports.PRIMITIVE_MARKS = util_1.flagKeys(MARK_INDEX);\nfunction isMarkDef(mark) {\n    return mark['type'];\n}\nexports.isMarkDef = isMarkDef;\nvar PRIMITIVE_MARK_INDEX = vega_util_1.toSet(exports.PRIMITIVE_MARKS);\nfunction isPrimitiveMark(mark) {\n    var markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexports.isPrimitiveMark = isPrimitiveMark;\nexports.STROKE_CONFIG = ['stroke', 'strokeWidth',\n    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];\nexports.FILL_CONFIG = ['fill', 'fillOpacity'];\nexports.FILL_STROKE_CONFIG = [].concat(exports.STROKE_CONFIG, exports.FILL_CONFIG);\nexports.VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];\nexports.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexports.defaultMarkConfig = {\n    color: '#4c78a8',\n};\nexports.defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: 5\n};\nexports.defaultTickConfig = {\n    thickness: 1\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQWdDO0FBRWhDLCtCQUEwQztBQUcxQyxJQUFpQixJQUFJLENBYXBCO0FBYkQsV0FBaUIsSUFBSTtJQUNOLFNBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsUUFBRyxHQUFVLEtBQUssQ0FBQztJQUNuQixTQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLFVBQUssR0FBWSxPQUFPLENBQUM7SUFDekIsU0FBSSxHQUFXLE1BQU0sQ0FBQztJQUN0QixTQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLFNBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsU0FBSSxHQUFXLE1BQU0sQ0FBQztJQUN0QixVQUFLLEdBQVksT0FBTyxDQUFDO0lBQ3pCLFdBQU0sR0FBYSxRQUFRLENBQUM7SUFDNUIsV0FBTSxHQUFhLFFBQVEsQ0FBQztJQUM1QixhQUFRLEdBQWUsVUFBVSxDQUFDO0FBQ2pELENBQUMsRUFiZ0IsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBYXBCO0FBUVksUUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNqQixRQUFBLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2YsUUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNqQixRQUFBLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDakIsUUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNqQixRQUFBLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ25CLFFBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDakIsUUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNqQixRQUFBLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBRXpCLFFBQUEsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDckIsUUFBQSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUVsQywwRkFBMEY7QUFDMUYsSUFBTSxVQUFVLEdBQXFCO0lBQ25DLElBQUksRUFBRSxDQUFDO0lBQ1AsR0FBRyxFQUFFLENBQUM7SUFDTixJQUFJLEVBQUUsQ0FBQztJQUNQLEtBQUssRUFBRSxDQUFDO0lBQ1IsSUFBSSxFQUFFLENBQUM7SUFDUCxJQUFJLEVBQUUsQ0FBQztJQUNQLEtBQUssRUFBRSxDQUFDO0lBQ1IsSUFBSSxFQUFFLENBQUM7SUFDUCxRQUFRLEVBQUUsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUM7QUFFRixnQkFBdUIsQ0FBUztJQUM5QixPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUZELHdCQUVDO0FBRUQsb0JBQTJCLENBQXVCO0lBQ2hELE9BQU8sZUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsZ0NBRUM7QUFFWSxRQUFBLGVBQWUsR0FBRyxlQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUErQ3BELG1CQUEwQixJQUFhO0lBQ3JDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RCLENBQUM7QUFGRCw4QkFFQztBQUVELElBQU0sb0JBQW9CLEdBQUcsaUJBQUssQ0FBQyx1QkFBZSxDQUFDLENBQUM7QUFFcEQseUJBQWdDLElBQXVEO0lBQ3JGLElBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BELE9BQU8sUUFBUSxJQUFJLG9CQUFvQixDQUFDO0FBQzFDLENBQUM7QUFIRCwwQ0FHQztBQUVZLFFBQUEsYUFBYSxHQUFHLENBQUMsUUFBUSxFQUFFLGFBQWE7SUFDbkQsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRXhDLFFBQUEsV0FBVyxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRXRDLFFBQUEsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBYSxFQUFFLG1CQUFXLENBQUMsQ0FBQztBQUUzRCxRQUFBLDhCQUE4QixHQUF5QixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUUzRSxRQUFBLDJDQUEyQyxHQUVwRDtJQUNGLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDdkIsR0FBRyxFQUFFLENBQUMsWUFBWSxFQUFFLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDO0lBQzdELElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztJQUNmLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ3pCLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUM7Q0FDaEMsQ0FBQztBQUVXLFFBQUEsaUJBQWlCLEdBQWU7SUFDM0MsS0FBSyxFQUFFLFNBQVM7Q0FDakIsQ0FBQztBQXdKVyxRQUFBLGdCQUFnQixHQUFjO0lBQ3pDLFVBQVUsRUFBRSxDQUFDO0lBQ2Isa0JBQWtCLEVBQUUsQ0FBQztDQUN0QixDQUFDO0FBbUJXLFFBQUEsaUJBQWlCLEdBQWU7SUFDM0MsU0FBUyxFQUFFLENBQUM7Q0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0b1NldH0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q29tcG9zaXRlTWFyaywgQ29tcG9zaXRlTWFya0RlZn0gZnJvbSAnLi9jb21wb3NpdGVtYXJrL2luZGV4JztcbmltcG9ydCB7Y29udGFpbnMsIGZsYWdLZXlzfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHtWZ01hcmtDb25maWd9IGZyb20gJy4vdmVnYS5zY2hlbWEnO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1hcmsge1xuICBleHBvcnQgY29uc3QgQVJFQTogJ2FyZWEnID0gJ2FyZWEnO1xuICBleHBvcnQgY29uc3QgQkFSOiAnYmFyJyA9ICdiYXInO1xuICBleHBvcnQgY29uc3QgTElORTogJ2xpbmUnID0gJ2xpbmUnO1xuICBleHBvcnQgY29uc3QgUE9JTlQ6ICdwb2ludCcgPSAncG9pbnQnO1xuICBleHBvcnQgY29uc3QgUkVDVDogJ3JlY3QnID0gJ3JlY3QnO1xuICBleHBvcnQgY29uc3QgUlVMRTogJ3J1bGUnID0gJ3J1bGUnO1xuICBleHBvcnQgY29uc3QgVEVYVDogJ3RleHQnID0gJ3RleHQnO1xuICBleHBvcnQgY29uc3QgVElDSzogJ3RpY2snID0gJ3RpY2snO1xuICBleHBvcnQgY29uc3QgVFJBSUw6ICd0cmFpbCcgPSAndHJhaWwnO1xuICBleHBvcnQgY29uc3QgQ0lSQ0xFOiAnY2lyY2xlJyA9ICdjaXJjbGUnO1xuICBleHBvcnQgY29uc3QgU1FVQVJFOiAnc3F1YXJlJyA9ICdzcXVhcmUnO1xuICBleHBvcnQgY29uc3QgR0VPU0hBUEU6ICdnZW9zaGFwZScgPSAnZ2Vvc2hhcGUnO1xufVxuXG4vKipcbiAqIEFsbCB0eXBlcyBvZiBwcmltaXRpdmUgbWFya3MuXG4gKi9cbmV4cG9ydCB0eXBlIE1hcmsgPSB0eXBlb2YgTWFyay5BUkVBIHwgdHlwZW9mIE1hcmsuQkFSIHwgdHlwZW9mIE1hcmsuTElORSB8IHR5cGVvZiBNYXJrLlRSQUlMIHwgdHlwZW9mIE1hcmsuUE9JTlQgfCB0eXBlb2YgTWFyay5URVhUIHwgdHlwZW9mIE1hcmsuVElDSyB8IHR5cGVvZiBNYXJrLlJFQ1QgfCB0eXBlb2YgTWFyay5SVUxFIHwgdHlwZW9mIE1hcmsuQ0lSQ0xFIHwgdHlwZW9mIE1hcmsuU1FVQVJFIHwgdHlwZW9mIE1hcmsuR0VPU0hBUEU7XG5cblxuZXhwb3J0IGNvbnN0IEFSRUEgPSBNYXJrLkFSRUE7XG5leHBvcnQgY29uc3QgQkFSID0gTWFyay5CQVI7XG5leHBvcnQgY29uc3QgTElORSA9IE1hcmsuTElORTtcbmV4cG9ydCBjb25zdCBQT0lOVCA9IE1hcmsuUE9JTlQ7XG5leHBvcnQgY29uc3QgVEVYVCA9IE1hcmsuVEVYVDtcbmV4cG9ydCBjb25zdCBUSUNLID0gTWFyay5USUNLO1xuZXhwb3J0IGNvbnN0IFRSQUlMID0gTWFyay5UUkFJTDtcbmV4cG9ydCBjb25zdCBSRUNUID0gTWFyay5SRUNUO1xuZXhwb3J0IGNvbnN0IFJVTEUgPSBNYXJrLlJVTEU7XG5leHBvcnQgY29uc3QgR0VPU0hBUEUgPSBNYXJrLkdFT1NIQVBFO1xuXG5leHBvcnQgY29uc3QgQ0lSQ0xFID0gTWFyay5DSVJDTEU7XG5leHBvcnQgY29uc3QgU1FVQVJFID0gTWFyay5TUVVBUkU7XG5cbi8vIFVzaW5nIG1hcHBlZCB0eXBlIHRvIGRlY2xhcmUgaW5kZXgsIGVuc3VyaW5nIHdlIGFsd2F5cyBoYXZlIGFsbCBtYXJrcyB3aGVuIHdlIGFkZCBtb3JlLlxuY29uc3QgTUFSS19JTkRFWDoge1tNIGluIE1hcmtdOiAxfSA9IHtcbiAgYXJlYTogMSxcbiAgYmFyOiAxLFxuICBsaW5lOiAxLFxuICBwb2ludDogMSxcbiAgdGV4dDogMSxcbiAgdGljazogMSxcbiAgdHJhaWw6IDEsXG4gIHJlY3Q6IDEsXG4gIGdlb3NoYXBlOiAxLFxuICBydWxlOiAxLFxuICBjaXJjbGU6IDEsXG4gIHNxdWFyZTogMVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTWFyayhtOiBzdHJpbmcpOiBtIGlzIE1hcmsge1xuICByZXR1cm4gISFNQVJLX0lOREVYW21dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYXRoTWFyayhtOiBNYXJrIHwgQ29tcG9zaXRlTWFyayk6IG0gaXMgJ2xpbmUnIHwgJ2FyZWEnIHwgJ3RyYWlsJyB7XG4gIHJldHVybiBjb250YWlucyhbJ2xpbmUnLCAnYXJlYScsICd0cmFpbCddLCBtKTtcbn1cblxuZXhwb3J0IGNvbnN0IFBSSU1JVElWRV9NQVJLUyA9IGZsYWdLZXlzKE1BUktfSU5ERVgpO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFya0NvbmZpZyBleHRlbmRzIFZnTWFya0NvbmZpZyB7XG4gIC8vIC0tLS0tLS0tLS0gQ29sb3IgLS0tLS0tLS0tLVxuICAvKipcbiAgICogV2hldGhlciB0aGUgbWFyaydzIGNvbG9yIHNob3VsZCBiZSB1c2VkIGFzIGZpbGwgY29sb3IgaW5zdGVhZCBvZiBzdHJva2UgY29sb3IuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAgZm9yIGFsbCBtYXJrcyBleGNlcHQgYHBvaW50YCBhbmQgYGZhbHNlYCBmb3IgYHBvaW50YC5cbiAgICpcbiAgICogX19BcHBsaWNhYmxlIGZvcjpfXyBgYmFyYCwgYHBvaW50YCwgYGNpcmNsZWAsIGBzcXVhcmVgLCBhbmQgYGFyZWFgIG1hcmtzLlxuICAgKlxuICAgKiBfX05vdGU6X18gVGhpcyBwcm9wZXJ0eSBjYW5ub3QgYmUgdXNlZCBpbiBhIFtzdHlsZSBjb25maWddKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvbWFyay5odG1sI3N0eWxlLWNvbmZpZykuXG4gICAqXG4gICAqL1xuICBmaWxsZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGNvbG9yLiAgTm90ZSB0aGF0IGBmaWxsYCBhbmQgYHN0cm9rZWAgaGF2ZSBoaWdoZXIgcHJlY2VkZW5jZSB0aGFuIGBjb2xvcmAgYW5kIHdpbGwgb3ZlcnJpZGUgYGNvbG9yYC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIDxzcGFuIHN0eWxlPVwiY29sb3I6ICM0NjgyYjQ7XCI+JiM5NjMyOzwvc3Bhbj4gYFwiIzQ2ODJiNFwiYFxuICAgKlxuICAgKiBfX05vdGU6X18gVGhpcyBwcm9wZXJ0eSBjYW5ub3QgYmUgdXNlZCBpbiBhIFtzdHlsZSBjb25maWddKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvbWFyay5odG1sI3N0eWxlLWNvbmZpZykuXG4gICAqL1xuICBjb2xvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXJCaW5TcGFjaW5nTWl4aW5zIHtcbiAgLyoqXG4gICAqIE9mZnNldCBiZXR3ZWVuIGJhcnMgZm9yIGJpbm5lZCBmaWVsZC4gIElkZWFsIHZhbHVlIGZvciB0aGlzIGlzIGVpdGhlciAwIChQcmVmZXJyZWQgYnkgc3RhdGlzdGljaWFucykgb3IgMSAoVmVnYS1MaXRlIERlZmF1bHQsIEQzIGV4YW1wbGUgc3R5bGUpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGJpblNwYWNpbmc/OiBudW1iZXI7XG59XG5cblxuLyoqIEBoaWRlICovXG5leHBvcnQgdHlwZSBIaWRkZW5Db21wb3NpdGUgPSBDb21wb3NpdGVNYXJrIHwgQ29tcG9zaXRlTWFya0RlZjtcblxuZXhwb3J0IHR5cGUgQW55TWFyayA9XG4gIEhpZGRlbkNvbXBvc2l0ZSB8XG4gIE1hcmsgfFxuICBNYXJrRGVmO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNNYXJrRGVmKG1hcms6IEFueU1hcmspOiBtYXJrIGlzIChNYXJrRGVmIHwgQ29tcG9zaXRlTWFya0RlZikge1xuICByZXR1cm4gbWFya1sndHlwZSddO1xufVxuXG5jb25zdCBQUklNSVRJVkVfTUFSS19JTkRFWCA9IHRvU2V0KFBSSU1JVElWRV9NQVJLUyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1pdGl2ZU1hcmsobWFyazogQ29tcG9zaXRlTWFyayB8IENvbXBvc2l0ZU1hcmtEZWYgfCBNYXJrIHwgTWFya0RlZik6IG1hcmsgaXMgTWFyayB7XG4gIGNvbnN0IG1hcmtUeXBlID0gaXNNYXJrRGVmKG1hcmspID8gbWFyay50eXBlIDogbWFyaztcbiAgcmV0dXJuIG1hcmtUeXBlIGluIFBSSU1JVElWRV9NQVJLX0lOREVYO1xufVxuXG5leHBvcnQgY29uc3QgU1RST0tFX0NPTkZJRyA9IFsnc3Ryb2tlJywgJ3N0cm9rZVdpZHRoJyxcbiAgJ3N0cm9rZURhc2gnLCAnc3Ryb2tlRGFzaE9mZnNldCcsICdzdHJva2VPcGFjaXR5J107XG5cbmV4cG9ydCBjb25zdCBGSUxMX0NPTkZJRyA9IFsnZmlsbCcsICdmaWxsT3BhY2l0eSddO1xuXG5leHBvcnQgY29uc3QgRklMTF9TVFJPS0VfQ09ORklHID0gW10uY29uY2F0KFNUUk9LRV9DT05GSUcsIEZJTExfQ09ORklHKTtcblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfTUFSS19DT05GSUdfUFJPUEVSVElFUzogKGtleW9mIE1hcmtDb25maWcpW10gPSBbJ2ZpbGxlZCcsICdjb2xvciddO1xuXG5leHBvcnQgY29uc3QgVkxfT05MWV9NQVJLX1NQRUNJRklDX0NPTkZJR19QUk9QRVJUWV9JTkRFWDoge1xuICBbayBpbiAodHlwZW9mIFBSSU1JVElWRV9NQVJLU1swXSldPzogKGtleW9mIE1hcmtDb25maWdNaXhpbnNba10pW11cbn0gPSB7XG4gIGFyZWE6IFsnbGluZScsICdwb2ludCddLFxuICBiYXI6IFsnYmluU3BhY2luZycsICdjb250aW51b3VzQmFuZFNpemUnLCAnZGlzY3JldGVCYW5kU2l6ZSddLFxuICBsaW5lOiBbJ3BvaW50J10sXG4gIHRleHQ6IFsnc2hvcnRUaW1lTGFiZWxzJ10sXG4gIHRpY2s6IFsnYmFuZFNpemUnLCAndGhpY2tuZXNzJ11cbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TWFya0NvbmZpZzogTWFya0NvbmZpZyA9IHtcbiAgY29sb3I6ICcjNGM3OGE4Jyxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFya0NvbmZpZ01peGlucyB7XG4gIC8qKiBNYXJrIENvbmZpZyAqL1xuICBtYXJrPzogTWFya0NvbmZpZztcblxuICAvLyBNQVJLLVNQRUNJRklDIENPTkZJR1NcbiAgLyoqIEFyZWEtU3BlY2lmaWMgQ29uZmlnICovXG4gIGFyZWE/OiBBcmVhQ29uZmlnO1xuXG4gIC8qKiBCYXItU3BlY2lmaWMgQ29uZmlnICovXG4gIGJhcj86IEJhckNvbmZpZztcblxuICAvKiogQ2lyY2xlLVNwZWNpZmljIENvbmZpZyAqL1xuICBjaXJjbGU/OiBNYXJrQ29uZmlnO1xuXG4gIC8qKiBMaW5lLVNwZWNpZmljIENvbmZpZyAqL1xuICBsaW5lPzogTGluZUNvbmZpZztcblxuICAvKiogUG9pbnQtU3BlY2lmaWMgQ29uZmlnICovXG4gIHBvaW50PzogTWFya0NvbmZpZztcblxuICAvKiogUmVjdC1TcGVjaWZpYyBDb25maWcgKi9cbiAgcmVjdD86IE1hcmtDb25maWc7XG5cbiAgLyoqIFJ1bGUtU3BlY2lmaWMgQ29uZmlnICovXG4gIHJ1bGU/OiBNYXJrQ29uZmlnO1xuXG4gIC8qKiBTcXVhcmUtU3BlY2lmaWMgQ29uZmlnICovXG4gIHNxdWFyZT86IE1hcmtDb25maWc7XG5cbiAgLyoqIFRleHQtU3BlY2lmaWMgQ29uZmlnICovXG4gIHRleHQ/OiBUZXh0Q29uZmlnO1xuXG4gIC8qKiBUaWNrLVNwZWNpZmljIENvbmZpZyAqL1xuICB0aWNrPzogVGlja0NvbmZpZztcblxuICAvKiogVHJhaWwtU3BlY2lmaWMgQ29uZmlnICovXG4gIHRyYWlsPzogTGluZUNvbmZpZztcblxuICAvKiogR2Vvc2hhcGUtU3BlY2lmaWMgQ29uZmlnICovXG4gIGdlb3NoYXBlPzogTWFya0NvbmZpZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEJhckNvbmZpZyBleHRlbmRzIEJhckJpblNwYWNpbmdNaXhpbnMsIE1hcmtDb25maWcge1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBzaXplIG9mIHRoZSBiYXJzIG9uIGNvbnRpbnVvdXMgc2NhbGVzLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDVgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGNvbnRpbnVvdXNCYW5kU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJhcnMuICBJZiB1bnNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZSBpcyAgYGJhbmRTaXplLTFgLFxuICAgKiB3aGljaCBwcm92aWRlcyAxIHBpeGVsIG9mZnNldCBiZXR3ZWVuIGJhcnMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGRpc2NyZXRlQmFuZFNpemU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnRPdmVybGF5TWl4aW5zIHtcbiAgLyoqXG4gICAqIEEgZmxhZyBmb3Igb3ZlcmxheWluZyBwb2ludHMgb24gdG9wIG9mIGxpbmUgb3IgYXJlYSBtYXJrcywgb3IgYW4gb2JqZWN0IGRlZmluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdmVybGF5ZWQgcG9pbnRzLlxuICAgKlxuICAgKiAtIElmIHRoaXMgcHJvcGVydHkgaXMgYFwidHJhbnNwYXJlbnRcImAsIHRyYW5zcGFyZW50IHBvaW50cyB3aWxsIGJlIHVzZWQgKGZvciBlbmhhbmNpbmcgdG9vbHRpcHMgYW5kIHNlbGVjdGlvbnMpLlxuICAgKlxuICAgKiAtIElmIHRoaXMgcHJvcGVydHkgaXMgYW4gZW1wdHkgb2JqZWN0IChge31gKSBvciBgdHJ1ZWAsIGZpbGxlZCBwb2ludHMgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiAtIElmIHRoaXMgcHJvcGVydHkgaXMgYGZhbHNlYCwgbm8gcG9pbnRzIHdvdWxkIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gbGluZSBvciBhcmVhIG1hcmtzLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYGZhbHNlYC5cbiAgICovXG4gIHBvaW50PzogYm9vbGVhbiB8IE1hcmtDb25maWcgfCAndHJhbnNwYXJlbnQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmVDb25maWcgZXh0ZW5kcyBNYXJrQ29uZmlnLCBQb2ludE92ZXJsYXlNaXhpbnMge31cblxuZXhwb3J0IGludGVyZmFjZSBMaW5lT3ZlcmxheU1peGlucyB7XG4gIC8qKlxuICAgKiBBIGZsYWcgZm9yIG92ZXJsYXlpbmcgbGluZSBvbiB0b3Agb2YgYXJlYSBtYXJrcywgb3IgYW4gb2JqZWN0IGRlZmluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBvdmVybGF5ZWQgbGluZXMuXG4gICAqXG4gICAqIC0gSWYgdGhpcyB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QgKGB7fWApIG9yIGB0cnVlYCwgbGluZXMgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiAtIElmIHRoaXMgdmFsdWUgaXMgYGZhbHNlYCwgbm8gbGluZXMgd291bGQgYmUgYXV0b21hdGljYWxseSBhZGRlZCB0byBhcmVhIG1hcmtzLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYGZhbHNlYC5cbiAgICovXG4gIGxpbmU/OiBib29sZWFuIHwgTWFya0NvbmZpZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcmVhQ29uZmlnIGV4dGVuZHMgTWFya0NvbmZpZywgUG9pbnRPdmVybGF5TWl4aW5zLCBMaW5lT3ZlcmxheU1peGlucyB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpY2tUaGlja25lc3NNaXhpbnMge1xuICAvKipcbiAgICogVGhpY2tuZXNzIG9mIHRoZSB0aWNrIG1hcmsuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgYDFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHRoaWNrbmVzcz86IG51bWJlcjtcbn1cblxuLy8gUG9pbnQvTGluZSBPdmVybGF5TWl4aW5zIGFyZSBvbmx5IGZvciBhcmVhLCBsaW5lLCBhbmQgdHJhaWwgYnV0IHdlIGRvbid0IHdhbnQgdG8gZGVjbGFyZSBtdWx0aXBsZSB0eXBlcyBvZiBNYXJrRGVmXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtEZWYgZXh0ZW5kcyBCYXJCaW5TcGFjaW5nTWl4aW5zLCBNYXJrQ29uZmlnLCBQb2ludE92ZXJsYXlNaXhpbnMsIExpbmVPdmVybGF5TWl4aW5zLCBUaWNrVGhpY2tuZXNzTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoZSBtYXJrIHR5cGUuXG4gICAqIE9uZSBvZiBgXCJiYXJcImAsIGBcImNpcmNsZVwiYCwgYFwic3F1YXJlXCJgLCBgXCJ0aWNrXCJgLCBgXCJsaW5lXCJgLFxuICAgKiBgXCJhcmVhXCJgLCBgXCJwb2ludFwiYCwgYFwiZ2Vvc2hhcGVcImAsIGBcInJ1bGVcImAsIGFuZCBgXCJ0ZXh0XCJgLlxuICAgKi9cbiAgdHlwZTogTWFyaztcblxuICAvKipcbiAgICogQSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIGN1c3RvbSBzdHlsZXMgdG8gYXBwbHkgdG8gdGhlIG1hcmsuIEEgc3R5bGUgaXMgYSBuYW1lZCBjb2xsZWN0aW9uIG9mIG1hcmsgcHJvcGVydHkgZGVmYXVsdHMgZGVmaW5lZCB3aXRoaW4gdGhlIFtzdHlsZSBjb25maWd1cmF0aW9uXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL21hcmsuaHRtbCNzdHlsZS1jb25maWcpLiBJZiBzdHlsZSBpcyBhbiBhcnJheSwgbGF0ZXIgc3R5bGVzIHdpbGwgb3ZlcnJpZGUgZWFybGllciBzdHlsZXMuIEFueSBbbWFyayBwcm9wZXJ0aWVzXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2VuY29kaW5nLmh0bWwjbWFyay1wcm9wKSBleHBsaWNpdGx5IGRlZmluZWQgd2l0aGluIHRoZSBgZW5jb2RpbmdgIHdpbGwgb3ZlcnJpZGUgYSBzdHlsZSBkZWZhdWx0LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gVGhlIG1hcmsncyBuYW1lLiAgRm9yIGV4YW1wbGUsIGEgYmFyIG1hcmsgd2lsbCBoYXZlIHN0eWxlIGBcImJhclwiYCBieSBkZWZhdWx0LlxuICAgKiBfX05vdGU6X18gQW55IHNwZWNpZmllZCBzdHlsZSB3aWxsIGF1Z21lbnQgdGhlIGRlZmF1bHQgc3R5bGUuIEZvciBleGFtcGxlLCBhIGJhciBtYXJrIHdpdGggYFwic3R5bGVcIjogXCJmb29cImAgd2lsbCByZWNlaXZlIGZyb20gYGNvbmZpZy5zdHlsZS5iYXJgIGFuZCBgY29uZmlnLnN0eWxlLmZvb2AgKHRoZSBzcGVjaWZpZWQgc3R5bGUgYFwiZm9vXCJgIGhhcyBoaWdoZXIgcHJlY2VkZW5jZSkuXG4gICAqL1xuICBzdHlsZT86IHN0cmluZyB8IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgbWFyayBiZSBjbGlwcGVkIHRvIHRoZSBlbmNsb3NpbmcgZ3JvdXDigJlzIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAqL1xuICBjbGlwPzogYm9vbGVhbjtcblxuICAvLyBPZmZzZXQgcHJvcGVydGllcyBzaG91bGQgbm90IGJlIGEgcGFydCBvZiBjb25maWdcblxuICAvKipcbiAgICogT2Zmc2V0IGZvciB4LXBvc2l0aW9uLlxuICAgKi9cbiAgeE9mZnNldD86IG51bWJlcjtcblxuICAvKipcbiAgICogT2Zmc2V0IGZvciB5LXBvc2l0aW9uLlxuICAgKi9cbiAgeU9mZnNldD86IG51bWJlcjtcblxuICAvKipcbiAgICogT2Zmc2V0IGZvciB4Mi1wb3NpdGlvbi5cbiAgICovXG4gIHgyT2Zmc2V0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPZmZzZXQgZm9yIHkyLXBvc2l0aW9uLlxuICAgKi9cbiAgeTJPZmZzZXQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0QmFyQ29uZmlnOiBCYXJDb25maWcgPSB7XG4gIGJpblNwYWNpbmc6IDEsXG4gIGNvbnRpbnVvdXNCYW5kU2l6ZTogNVxufTtcblxuZXhwb3J0IGludGVyZmFjZSBUZXh0Q29uZmlnIGV4dGVuZHMgTWFya0NvbmZpZyB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIG1vbnRoIG5hbWVzIGFuZCB3ZWVrZGF5IG5hbWVzIHNob3VsZCBiZSBhYmJyZXZpYXRlZC5cbiAgICovXG4gIHNob3J0VGltZUxhYmVscz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGlja0NvbmZpZyBleHRlbmRzIE1hcmtDb25maWcsIFRpY2tUaGlja25lc3NNaXhpbnMge1xuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSB0aWNrcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICAyLzMgb2YgcmFuZ2VTdGVwLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBiYW5kU2l6ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUaWNrQ29uZmlnOiBUaWNrQ29uZmlnID0ge1xuICB0aGlja25lc3M6IDFcbn07XG4iXX0=","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/mark.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}}],"sources":{"node_modules/vega-lite/build/src/mark.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar util_1 = require(\"./util\");\nvar Mark;\n(function (Mark) {\n    Mark.AREA = 'area';\n    Mark.BAR = 'bar';\n    Mark.LINE = 'line';\n    Mark.POINT = 'point';\n    Mark.RECT = 'rect';\n    Mark.RULE = 'rule';\n    Mark.TEXT = 'text';\n    Mark.TICK = 'tick';\n    Mark.TRAIL = 'trail';\n    Mark.CIRCLE = 'circle';\n    Mark.SQUARE = 'square';\n    Mark.GEOSHAPE = 'geoshape';\n})(Mark = exports.Mark || (exports.Mark = {}));\nexports.AREA = Mark.AREA;\nexports.BAR = Mark.BAR;\nexports.LINE = Mark.LINE;\nexports.POINT = Mark.POINT;\nexports.TEXT = Mark.TEXT;\nexports.TICK = Mark.TICK;\nexports.TRAIL = Mark.TRAIL;\nexports.RECT = Mark.RECT;\nexports.RULE = Mark.RULE;\nexports.GEOSHAPE = Mark.GEOSHAPE;\nexports.CIRCLE = Mark.CIRCLE;\nexports.SQUARE = Mark.SQUARE;\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nvar MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nfunction isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexports.isMark = isMark;\nfunction isPathMark(m) {\n    return util_1.contains(['line', 'area', 'trail'], m);\n}\nexports.isPathMark = isPathMark;\nexports.PRIMITIVE_MARKS = util_1.flagKeys(MARK_INDEX);\nfunction isMarkDef(mark) {\n    return mark['type'];\n}\nexports.isMarkDef = isMarkDef;\nvar PRIMITIVE_MARK_INDEX = vega_util_1.toSet(exports.PRIMITIVE_MARKS);\nfunction isPrimitiveMark(mark) {\n    var markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexports.isPrimitiveMark = isPrimitiveMark;\nexports.STROKE_CONFIG = ['stroke', 'strokeWidth',\n    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];\nexports.FILL_CONFIG = ['fill', 'fillOpacity'];\nexports.FILL_STROKE_CONFIG = [].concat(exports.STROKE_CONFIG, exports.FILL_CONFIG);\nexports.VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];\nexports.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexports.defaultMarkConfig = {\n    color: '#4c78a8',\n};\nexports.defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: 5\n};\nexports.defaultTickConfig = {\n    thickness: 1\n};\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":88}},"hash":"0e234556914e51dba3357513854783ee","cacheData":{"env":{}}}