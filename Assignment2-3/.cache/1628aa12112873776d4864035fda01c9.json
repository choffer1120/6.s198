{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/mnist/package.json","includedInParent":true,"mtime":1532028279835},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/mnist/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"vega-util","loc":{"line":4,"column":26}},{"name":"../../fielddef","loc":{"line":5,"column":25}},{"name":"../../log","loc":{"line":6,"column":18}},{"name":"../../predicate","loc":{"line":7,"column":26}},{"name":"../../scale","loc":{"line":8,"column":22}},{"name":"../../util","loc":{"line":9,"column":21}},{"name":"../../vega.schema","loc":{"line":10,"column":28}},{"name":"../common","loc":{"line":11,"column":23}},{"name":"../selection/selection","loc":{"line":12,"column":26}},{"name":"./valueref","loc":{"line":13,"column":18}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar predicate_1 = require(\"../../predicate\");\nvar scale_1 = require(\"../../scale\");\nvar util_1 = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar common_1 = require(\"../common\");\nvar selection_1 = require(\"../selection/selection\");\nvar ref = require(\"./valueref\");\nfunction color(model, opt) {\n    if (opt === void 0) { opt = { valueOnly: false }; }\n    var markDef = model.markDef, encoding = model.encoding, config = model.config;\n    var filled = markDef.filled, markType = markDef.type;\n    var configValue = {\n        fill: common_1.getMarkConfig('fill', markDef, config),\n        stroke: common_1.getMarkConfig('stroke', markDef, config),\n        color: common_1.getMarkConfig('color', markDef, config)\n    };\n    var transparentIfNeeded = util_1.contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n    var defaultValue = {\n        fill: markDef.fill || configValue.fill ||\n            // If there is no fill, always fill symbols, bar, geoshape\n            // with transparent fills https://github.com/vega/vega-lite/issues/1316\n            transparentIfNeeded,\n        stroke: markDef.stroke || configValue.stroke\n    };\n    var colorVgChannel = filled ? 'fill' : 'stroke';\n    var fillStrokeMarkDefAndConfig = tslib_1.__assign({}, (defaultValue.fill ? {\n        fill: { value: defaultValue.fill }\n    } : {}), (defaultValue.stroke ? {\n        stroke: { value: defaultValue.stroke }\n    } : {}));\n    if (encoding.fill || encoding.stroke) {\n        // ignore encoding.color, markDef.color, config.color\n        if (markDef.color) {\n            // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n        }\n        return tslib_1.__assign({}, nonPosition('fill', model, { defaultValue: defaultValue.fill || transparentIfNeeded }), nonPosition('stroke', model, { defaultValue: defaultValue.stroke }));\n    }\n    else if (encoding.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {\n            vgChannel: colorVgChannel,\n            // apply default fill/stroke first, then color config, then transparent if needed.\n            defaultValue: markDef[colorVgChannel] || markDef.color || configValue[colorVgChannel] || configValue.color || (filled ? transparentIfNeeded : undefined)\n        }));\n    }\n    else if (markDef.fill || markDef.stroke) {\n        // Ignore markDef.color, config.color\n        if (markDef.color) {\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n        }\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (markDef.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, (_a = {}, _a[colorVgChannel] = { value: markDef.color }, _a));\n    }\n    else if (configValue.fill || configValue.stroke) {\n        // ignore config.color\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (configValue.color) {\n        return tslib_1.__assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), (_b = {}, _b[colorVgChannel] = { value: configValue.color }, _b));\n    }\n    return {};\n    var _a, _b;\n}\nexports.color = color;\nfunction baseEncodeEntry(model, ignore) {\n    return tslib_1.__assign({}, markDefProperties(model.markDef, ignore), color(model), nonPosition('opacity', model), tooltip(model), text(model, 'href'));\n}\nexports.baseEncodeEntry = baseEncodeEntry;\nfunction markDefProperties(mark, ignore) {\n    return vega_schema_1.VG_MARK_CONFIGS.reduce(function (m, prop) {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nfunction valueIfDefined(prop, value) {\n    if (value !== undefined) {\n        return _a = {}, _a[prop] = { value: value }, _a;\n    }\n    return undefined;\n    var _a;\n}\nexports.valueIfDefined = valueIfDefined;\nfunction validPredicate(vgRef) {\n    return vgRef + \" !== null && !isNaN(\" + vgRef + \")\";\n}\nfunction defined(model) {\n    if (model.config.invalidValues === 'filter') {\n        var fields = ['x', 'y'].map(function (channel) {\n            var scaleComponent = model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // Discrete domain scales can handle invalid values, but continuous scales can't.\n                if (scale_1.hasContinuousDomain(scaleType)) {\n                    return model.vgField(channel, { expr: 'datum' });\n                }\n            }\n            return undefined;\n        })\n            .filter(function (field) { return !!field; })\n            .map(validPredicate);\n        if (fields.length > 0) {\n            return {\n                defined: { signal: fields.join(' && ') }\n            };\n        }\n    }\n    return {};\n}\nexports.defined = defined;\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nfunction nonPosition(channel, model, opt) {\n    if (opt === void 0) { opt = {}; }\n    var defaultValue = opt.defaultValue, vgChannel = opt.vgChannel;\n    var defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);\n    var channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel || channel, function (cDef) {\n        return ref.midPoint(channel, cDef, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point\n        defaultRef);\n    });\n}\nexports.nonPosition = nonPosition;\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nfunction wrapCondition(model, channelDef, vgChannel, refFn) {\n    var condition = channelDef && channelDef.condition;\n    var valueRef = refFn(channelDef);\n    if (condition) {\n        var conditions = vega_util_1.isArray(condition) ? condition : [condition];\n        var vgConditions = conditions.map(function (c) {\n            var conditionValueRef = refFn(c);\n            var test = fielddef_1.isConditionalSelection(c) ? selection_1.selectionPredicate(model, c.selection) : predicate_1.expression(model, c.test);\n            return tslib_1.__assign({ test: test }, conditionValueRef);\n        });\n        return _a = {},\n            _a[vgChannel] = vgConditions.concat((valueRef !== undefined ? [valueRef] : [])),\n            _a;\n    }\n    else {\n        return valueRef !== undefined ? (_b = {}, _b[vgChannel] = valueRef, _b) : {};\n    }\n    var _a, _b;\n}\nexports.wrapCondition = wrapCondition;\nfunction tooltip(model) {\n    var channel = 'tooltip';\n    var channelDef = model.encoding[channel];\n    if (vega_util_1.isArray(channelDef)) {\n        var keyValues = channelDef.map(function (fieldDef) {\n            var key = fieldDef.title !== undefined ? fieldDef.title : fielddef_1.vgField(fieldDef, { binSuffix: 'range' });\n            var value = ref.text(fieldDef, model.config).signal;\n            return \"\\\"\" + key + \"\\\": \" + value;\n        });\n        return { tooltip: { signal: \"{\" + keyValues.join(', ') + \"}\" } };\n    }\n    else {\n        // if not an array, behave just like text\n        return textCommon(model, channel, channelDef);\n    }\n}\nexports.tooltip = tooltip;\nfunction text(model, channel) {\n    if (channel === void 0) { channel = 'text'; }\n    var channelDef = model.encoding[channel];\n    return textCommon(model, channel, channelDef);\n}\nexports.text = text;\nfunction textCommon(model, channel, channelDef) {\n    return wrapCondition(model, channelDef, channel, function (cDef) { return ref.text(cDef, model.config); });\n}\nfunction bandPosition(fieldDef, channel, model) {\n    var scaleName = model.scaleName(channel);\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size || model.markDef.size !== undefined) {\n        var orient = model.markDef.orient;\n        if (orient) {\n            var centeredBandPositionMixins = (_a = {},\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                _a[channel + 'c'] = ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 }),\n                _a);\n            if (fielddef_1.getFieldDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (fielddef_1.isValueDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, (_b = {}, _b[sizeChannel] = { value: model.markDef.size }, _b));\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    return _c = {},\n        _c[channel] = ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),\n        _c[sizeChannel] = ref.bandRef(scaleName),\n        _c;\n    var _a, _b, _c;\n}\nexports.bandPosition = bandPosition;\nfunction centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {\n    var centerChannel = channel === 'x' ? 'xc' : 'yc';\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    return tslib_1.__assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexports.centeredBandPosition = centeredBandPosition;\nfunction binnedPosition(fieldDef, channel, scaleName, spacing, reverse) {\n    if (channel === 'x') {\n        return {\n            x2: ref.bin(fieldDef, scaleName, 'start', reverse ? 0 : spacing),\n            x: ref.bin(fieldDef, scaleName, 'end', reverse ? spacing : 0)\n        };\n    }\n    else {\n        return {\n            y2: ref.bin(fieldDef, scaleName, 'start', reverse ? spacing : 0),\n            y: ref.bin(fieldDef, scaleName, 'end', reverse ? 0 : spacing)\n        };\n    }\n}\nexports.binnedPosition = binnedPosition;\n/**\n * Return mixins for point (non-band) position channels.\n */\nfunction pointPosition(channel, model, defaultRef, vgChannel) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var channelDef = encoding[channel];\n    var scaleName = model.scaleName(channel);\n    var scale = model.getScaleComponent(channel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable(channel, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {},\n        _a[vgChannel || channel] = valueRef,\n        _a;\n    var _a;\n}\nexports.pointPosition = pointPosition;\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nfunction pointPosition2(model, defaultRef, channel) {\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var baseChannel = channel === 'x2' ? 'x' : 'y';\n    var channelDef = encoding[baseChannel];\n    var scaleName = model.scaleName(baseChannel);\n    var scale = model.getScaleComponent(baseChannel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable2(channel, channelDef, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {}, _a[channel] = valueRef, _a;\n    var _a;\n}\nexports.pointPosition2 = pointPosition2;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4aW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbWFyay9taXhpbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWtDO0FBR2xDLDJDQVV3QjtBQUN4QiwrQkFBaUM7QUFFakMsNkNBQTJDO0FBQzNDLHFDQUFnRDtBQUNoRCxtQ0FBb0M7QUFDcEMsaURBQTZFO0FBQzdFLG9DQUF3QztBQUN4QyxvREFBMEQ7QUFFMUQsZ0NBQWtDO0FBRWxDLGVBQXNCLEtBQWdCLEVBQUUsR0FBOEM7SUFBOUMsb0JBQUEsRUFBQSxRQUE2QixTQUFTLEVBQUUsS0FBSyxFQUFDO0lBQzdFLElBQUEsdUJBQU8sRUFBRSx5QkFBUSxFQUFFLHFCQUFNLENBQVU7SUFDbkMsSUFBQSx1QkFBTSxFQUFFLHVCQUFjLENBQVk7SUFFekMsSUFBTSxXQUFXLEdBQUc7UUFDbEIsSUFBSSxFQUFFLHNCQUFhLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7UUFDNUMsTUFBTSxFQUFFLHNCQUFhLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7UUFDaEQsS0FBSyxFQUFFLHNCQUFhLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7S0FDL0MsQ0FBQztJQUVGLElBQU0sbUJBQW1CLEdBQUcsZUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUU3SCxJQUFNLFlBQVksR0FBRztRQUNuQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsSUFBSTtZQUN0QywwREFBMEQ7WUFDMUQsdUVBQXVFO1lBQ3JFLG1CQUFtQjtRQUNyQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsTUFBTTtLQUM3QyxDQUFDO0lBRUYsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUVsRCxJQUFNLDBCQUEwQix3QkFDM0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLElBQUksRUFBQztLQUNqQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDSixDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFDO0tBQ3JDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNSLENBQUM7SUFFRixJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtRQUNwQyxxREFBcUQ7UUFDckQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2pCLHVHQUF1RztZQUN2RyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLElBQUksUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLElBQUksUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNHO1FBRUQsNEJBQ0ssV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLElBQUksSUFBSSxtQkFBbUIsRUFBQyxDQUFDLEVBQ3BGLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUNwRTtLQUNIO1NBQU0sSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO1FBRXpCLDRCQUNLLDBCQUEwQixFQUUxQixXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtZQUM3QixTQUFTLEVBQUUsY0FBYztZQUN6QixrRkFBa0Y7WUFDbEYsWUFBWSxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3pKLENBQUMsRUFDRjtLQUNIO1NBQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDekMscUNBQXFDO1FBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLElBQUksT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pHO1FBQ0QsT0FBTywwQkFBMEIsQ0FBQztLQUNuQztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtRQUN4Qiw0QkFDSywwQkFBMEIsZUFHNUIsY0FBYyxJQUFHLEVBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUMsT0FDeEM7S0FDSDtTQUFNLElBQUksV0FBVyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQ2pELHNCQUFzQjtRQUN0QixPQUFPLDBCQUEwQixDQUFDO0tBQ25DO1NBQU0sSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO1FBQzVCLDRCQUNLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLGFBQWEsRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUM3RCxjQUFjLElBQUcsRUFBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBQyxPQUM1QztLQUNIO0lBQ0QsT0FBTyxFQUFFLENBQUM7O0FBQ1osQ0FBQztBQTVFRCxzQkE0RUM7QUFJRCx5QkFBZ0MsS0FBZ0IsRUFBRSxNQUFjO0lBQzlELDRCQUNLLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQ3hDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFDWixXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ2QsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFDdEI7QUFDSixDQUFDO0FBUkQsMENBUUM7QUFFRCwyQkFBMkIsSUFBYSxFQUFFLE1BQWM7SUFDdEQsT0FBTyw2QkFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsRUFBRSxJQUFJO1FBQ3BDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3pELENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQUVELHdCQUErQixJQUFZLEVBQUUsS0FBZ0M7SUFDM0UsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLGdCQUFRLEdBQUMsSUFBSSxJQUFHLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBQyxLQUFFO0tBQ2pDO0lBQ0QsT0FBTyxTQUFTLENBQUM7O0FBQ25CLENBQUM7QUFMRCx3Q0FLQztBQUVELHdCQUF3QixLQUFhO0lBQ25DLE9BQVUsS0FBSyw0QkFBdUIsS0FBSyxNQUFHLENBQUM7QUFDakQsQ0FBQztBQUVELGlCQUF3QixLQUFnQjtJQUN0QyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLFFBQVEsRUFBRTtRQUMzQyxJQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUE2QjtZQUN4RCxJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDeEQsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLElBQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRTdDLGlGQUFpRjtnQkFDakYsSUFBSSwyQkFBbUIsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDbEMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO2lCQUNoRDthQUNGO1lBQ0QsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEtBQUssRUFBUCxDQUFPLENBQUM7YUFDeEIsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXZCLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckIsT0FBTztnQkFDTCxPQUFPLEVBQUUsRUFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQzthQUN2QyxDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQXpCRCwwQkF5QkM7QUFFRDs7R0FFRztBQUNILHFCQUE0QixPQUE2QyxFQUFFLEtBQWdCLEVBQUUsR0FBaUc7SUFBakcsb0JBQUEsRUFBQSxRQUFpRztJQUNyTCxJQUFBLCtCQUFZLEVBQUUseUJBQVMsQ0FBUTtJQUN0QyxJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXRHLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0MsT0FBTyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLElBQUksT0FBTyxFQUFFLFVBQUMsSUFBSTtRQUNqRSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQ2pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFDdkMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxFQUNoQyxJQUFJLEVBQUUsNEVBQTRFO1FBQ2xGLFVBQVUsQ0FDWCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBZEQsa0NBY0M7QUFFRDs7O0dBR0c7QUFDSCx1QkFDSSxLQUFnQixFQUFFLFVBQThCLEVBQUUsU0FBaUIsRUFDbkUsS0FBK0M7SUFFakQsSUFBTSxTQUFTLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDckQsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLElBQUksU0FBUyxFQUFFO1FBQ2IsSUFBTSxVQUFVLEdBQUcsbUJBQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hFLElBQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDO1lBQ3BDLElBQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQU0sSUFBSSxHQUFHLGlDQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw4QkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUcsMEJBQ0UsSUFBSSxNQUFBLElBQ0QsaUJBQWlCLEVBQ3BCO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSDtZQUNFLEdBQUMsU0FBUyxJQUNMLFlBQVksUUFDWixDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUM5QztlQUNEO0tBQ0g7U0FBTTtRQUNMLE9BQU8sUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLFdBQUUsR0FBQyxTQUFTLElBQUcsUUFBUSxNQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDOUQ7O0FBQ0gsQ0FBQztBQXpCRCxzQ0F5QkM7QUFFRCxpQkFBd0IsS0FBZ0I7SUFDdEMsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzFCLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsSUFBSSxtQkFBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3ZCLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBQyxRQUFRO1lBQ3hDLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBQ3BHLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDdEQsT0FBTyxPQUFJLEdBQUcsWUFBTSxLQUFPLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEVBQUMsT0FBTyxFQUFFLEVBQUMsTUFBTSxFQUFFLE1BQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRyxFQUFDLEVBQUMsQ0FBQztLQUN6RDtTQUFNO1FBQ0wseUNBQXlDO1FBQ3pDLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDL0M7QUFDSCxDQUFDO0FBZEQsMEJBY0M7QUFFRCxjQUFxQixLQUFnQixFQUFFLE9BQWlDO0lBQWpDLHdCQUFBLEVBQUEsZ0JBQWlDO0lBQ3RFLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBSEQsb0JBR0M7QUFFRCxvQkFBb0IsS0FBZ0IsRUFBRSxPQUFvQyxFQUFFLFVBQXFHO0lBQy9LLE9BQU8sYUFBYSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQUMsSUFBSSxJQUFLLE9BQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUVELHNCQUE2QixRQUEwQixFQUFFLE9BQWdCLEVBQUUsS0FBZ0I7SUFDekYsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQyxJQUFNLFdBQVcsR0FBRyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUV6RCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUMzRCxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQU0sMEJBQTBCO2dCQUM5Qix5REFBeUQ7Z0JBQ3pELHlFQUF5RTtnQkFDekUsR0FBQyxPQUFPLEdBQUMsR0FBRyxJQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLENBQUM7bUJBQ2xFLENBQUM7WUFFRixJQUFJLHNCQUFXLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDcEMsNEJBQ0ssMEJBQTBCLEVBQzFCLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBQyxDQUFDLEVBQ3ZEO2FBQ0g7aUJBQU0sSUFBSSxxQkFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzFDLDRCQUNLLDBCQUEwQixFQUMxQixXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUMsQ0FBQyxFQUN2RDthQUNIO2lCQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUMzQyw0QkFDSywwQkFBMEIsZUFDNUIsV0FBVyxJQUFHLEVBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLE9BQzFDO2FBQ0g7U0FDRjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM1RTtLQUNGO0lBQ0Q7UUFDRSxHQUFDLE9BQU8sSUFBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLENBQUM7UUFDbEUsR0FBQyxXQUFXLElBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7V0FDckM7O0FBQ0osQ0FBQztBQXJDRCxvQ0FxQ0M7QUFFRCw4QkFBcUMsT0FBa0IsRUFBRSxLQUFnQixFQUFFLGFBQXlCLEVBQUUsY0FBMEI7SUFDOUgsSUFBTSxhQUFhLEdBQWdCLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pFLElBQU0sV0FBVyxHQUFHLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ3pELDRCQUNLLGFBQWEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsRUFDM0QsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUMsQ0FBQyxFQUNuRjtBQUNKLENBQUM7QUFQRCxvREFPQztBQUVELHdCQUErQixRQUEwQixFQUFFLE9BQWdCLEVBQUUsU0FBaUIsRUFBRSxPQUFlLEVBQUUsT0FBZ0I7SUFDL0gsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO1FBQ25CLE9BQU87WUFDTCxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2hFLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUQsQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPO1lBQ0wsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1NBQzlELENBQUM7S0FDSDtBQUNILENBQUM7QUFaRCx3Q0FZQztBQUdEOztHQUVHO0FBQ0gsdUJBQThCLE9BQWdCLEVBQUUsS0FBZ0IsRUFBRSxVQUFrRCxFQUFFLFNBQTZCO0lBQ2pKLGdHQUFnRztJQUV6RixJQUFBLHlCQUFRLEVBQUUsaUJBQUksRUFBRSxtQkFBSyxDQUFVO0lBRXRDLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUcvQyxJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFHckQsSUFBTSxRQUFRLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLGdHQUFnRztRQUNoRyxFQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxzQkFFNUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUNsRSxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FDL0QsRUFDQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDMUIsQ0FBQztJQUVKO1FBQ0UsR0FBQyxTQUFTLElBQUksT0FBTyxJQUFHLFFBQVE7V0FDaEM7O0FBQ0osQ0FBQztBQTFCRCxzQ0EwQkM7QUFFRDs7O0dBR0c7QUFDSCx3QkFBK0IsS0FBZ0IsRUFBRSxVQUFxQyxFQUFFLE9BQW9CO0lBQ25HLElBQUEseUJBQVEsRUFBRSxpQkFBSSxFQUFFLG1CQUFLLENBQVU7SUFFdEMsSUFBTSxXQUFXLEdBQUcsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakQsSUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRW5ELElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyRCxJQUFNLFFBQVEsR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDekUscUdBQXFHO1FBQ3JHLEVBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQSxDQUFDLHNCQUUzQixHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUMvRSxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FDbkUsRUFDRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDNUIsQ0FBQztJQUVKLGdCQUFRLEdBQUMsT0FBTyxJQUFHLFFBQVEsS0FBRTs7QUFDL0IsQ0FBQztBQXJCRCx3Q0FxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQXJyYXl9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7Tk9OUE9TSVRJT05fU0NBTEVfQ0hBTk5FTFMsIFBvc2l0aW9uU2NhbGVDaGFubmVsfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7XG4gIENoYW5uZWxEZWYsXG4gIEZpZWxkRGVmLFxuICBGaWVsZERlZldpdGhDb25kaXRpb24sXG4gIGdldEZpZWxkRGVmLFxuICBpc0NvbmRpdGlvbmFsU2VsZWN0aW9uLFxuICBpc1ZhbHVlRGVmLFxuICBUZXh0RmllbGREZWYsXG4gIFZhbHVlRGVmV2l0aENvbmRpdGlvbixcbiAgdmdGaWVsZCxcbn0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge01hcmtEZWZ9IGZyb20gJy4uLy4uL21hcmsnO1xuaW1wb3J0IHtleHByZXNzaW9ufSBmcm9tICcuLi8uLi9wcmVkaWNhdGUnO1xuaW1wb3J0IHtoYXNDb250aW51b3VzRG9tYWlufSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge2NvbnRhaW5zfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VkdfTUFSS19DT05GSUdTLCBWZ0VuY29kZUVudHJ5LCBWZ1ZhbHVlUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2dldE1hcmtDb25maWd9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge3NlbGVjdGlvblByZWRpY2F0ZX0gZnJvbSAnLi4vc2VsZWN0aW9uL3NlbGVjdGlvbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvcihtb2RlbDogVW5pdE1vZGVsLCBvcHQ6IHt2YWx1ZU9ubHk6IGJvb2xlYW59ID0ge3ZhbHVlT25seTogZmFsc2V9KTogVmdFbmNvZGVFbnRyeSB7XG4gIGNvbnN0IHttYXJrRGVmLCBlbmNvZGluZywgY29uZmlnfSA9IG1vZGVsO1xuICBjb25zdCB7ZmlsbGVkLCB0eXBlOiBtYXJrVHlwZX0gPSBtYXJrRGVmO1xuXG4gIGNvbnN0IGNvbmZpZ1ZhbHVlID0ge1xuICAgIGZpbGw6IGdldE1hcmtDb25maWcoJ2ZpbGwnLCBtYXJrRGVmLCBjb25maWcpLFxuICAgIHN0cm9rZTogZ2V0TWFya0NvbmZpZygnc3Ryb2tlJywgbWFya0RlZiwgY29uZmlnKSxcbiAgICBjb2xvcjogZ2V0TWFya0NvbmZpZygnY29sb3InLCBtYXJrRGVmLCBjb25maWcpXG4gIH07XG5cbiAgY29uc3QgdHJhbnNwYXJlbnRJZk5lZWRlZCA9IGNvbnRhaW5zKFsnYmFyJywgJ3BvaW50JywgJ2NpcmNsZScsICdzcXVhcmUnLCAnZ2Vvc2hhcGUnXSwgbWFya1R5cGUpID8gJ3RyYW5zcGFyZW50JyA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBkZWZhdWx0VmFsdWUgPSB7XG4gICAgZmlsbDogbWFya0RlZi5maWxsIHx8IGNvbmZpZ1ZhbHVlLmZpbGwgfHxcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBmaWxsLCBhbHdheXMgZmlsbCBzeW1ib2xzLCBiYXIsIGdlb3NoYXBlXG4gICAgLy8gd2l0aCB0cmFuc3BhcmVudCBmaWxscyBodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzEzMTZcbiAgICAgIHRyYW5zcGFyZW50SWZOZWVkZWQsXG4gICAgc3Ryb2tlOiBtYXJrRGVmLnN0cm9rZSB8fCBjb25maWdWYWx1ZS5zdHJva2VcbiAgfTtcblxuICBjb25zdCBjb2xvclZnQ2hhbm5lbCA9IGZpbGxlZCA/ICdmaWxsJyA6ICdzdHJva2UnO1xuXG4gIGNvbnN0IGZpbGxTdHJva2VNYXJrRGVmQW5kQ29uZmlnOiBWZ0VuY29kZUVudHJ5ID0ge1xuICAgIC4uLihkZWZhdWx0VmFsdWUuZmlsbCA/IHtcbiAgICAgIGZpbGw6IHt2YWx1ZTogZGVmYXVsdFZhbHVlLmZpbGx9XG4gICAgfSA6IHt9KSxcbiAgICAuLi4oZGVmYXVsdFZhbHVlLnN0cm9rZSA/IHtcbiAgICAgIHN0cm9rZToge3ZhbHVlOiBkZWZhdWx0VmFsdWUuc3Ryb2tlfVxuICAgIH0gOiB7fSksXG4gIH07XG5cbiAgaWYgKGVuY29kaW5nLmZpbGwgfHwgZW5jb2Rpbmcuc3Ryb2tlKSB7XG4gICAgLy8gaWdub3JlIGVuY29kaW5nLmNvbG9yLCBtYXJrRGVmLmNvbG9yLCBjb25maWcuY29sb3JcbiAgICBpZiAobWFya0RlZi5jb2xvcikge1xuICAgICAgLy8gd2FybiBmb3IgbWFya0RlZi5jb2xvciAgKG5vIG5lZWQgdG8gd2FybiBlbmNvZGluZy5jb2xvciBhcyBpdCB3aWxsIGJlIGRyb3BwZWQgaW4gbm9ybWFsaXplZCBhbHJlYWR5KVxuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuZHJvcHBpbmdDb2xvcigncHJvcGVydHknLCB7ZmlsbDogJ2ZpbGwnIGluIGVuY29kaW5nLCBzdHJva2U6ICdzdHJva2UnIGluIGVuY29kaW5nfSkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5ub25Qb3NpdGlvbignZmlsbCcsIG1vZGVsLCB7ZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUuZmlsbCB8fCB0cmFuc3BhcmVudElmTmVlZGVkfSksXG4gICAgICAuLi5ub25Qb3NpdGlvbignc3Ryb2tlJywgbW9kZWwsIHtkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZS5zdHJva2V9KVxuICAgIH07XG4gIH0gZWxzZSBpZiAoZW5jb2RpbmcuY29sb3IpIHtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWxsU3Ryb2tlTWFya0RlZkFuZENvbmZpZyxcbiAgICAgIC8vIG92ZXJyaWRlIHRoZW0gd2l0aCBlbmNvZGVkIGNvbG9yIGZpZWxkXG4gICAgICAuLi5ub25Qb3NpdGlvbignY29sb3InLCBtb2RlbCwge1xuICAgICAgICB2Z0NoYW5uZWw6IGNvbG9yVmdDaGFubmVsLFxuICAgICAgICAvLyBhcHBseSBkZWZhdWx0IGZpbGwvc3Ryb2tlIGZpcnN0LCB0aGVuIGNvbG9yIGNvbmZpZywgdGhlbiB0cmFuc3BhcmVudCBpZiBuZWVkZWQuXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogbWFya0RlZltjb2xvclZnQ2hhbm5lbF0gfHwgbWFya0RlZi5jb2xvciB8fCBjb25maWdWYWx1ZVtjb2xvclZnQ2hhbm5lbF0gfHwgY29uZmlnVmFsdWUuY29sb3IgfHwgKGZpbGxlZCA/IHRyYW5zcGFyZW50SWZOZWVkZWQgOiB1bmRlZmluZWQpXG4gICAgICB9KVxuICAgIH07XG4gIH0gZWxzZSBpZiAobWFya0RlZi5maWxsIHx8IG1hcmtEZWYuc3Ryb2tlKSB7XG4gICAgLy8gSWdub3JlIG1hcmtEZWYuY29sb3IsIGNvbmZpZy5jb2xvclxuICAgIGlmIChtYXJrRGVmLmNvbG9yKSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5kcm9wcGluZ0NvbG9yKCdwcm9wZXJ0eScsIHtmaWxsOiAnZmlsbCcgaW4gbWFya0RlZiwgc3Ryb2tlOiAnc3Ryb2tlJyBpbiBtYXJrRGVmfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsbFN0cm9rZU1hcmtEZWZBbmRDb25maWc7XG4gIH0gZWxzZSBpZiAobWFya0RlZi5jb2xvcikge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5maWxsU3Ryb2tlTWFya0RlZkFuZENvbmZpZywgLy8gaW4gdGhpcyBjYXNlLCBmaWxsU3Ryb2tlTWFya0RlZkFuZENvbmZpZyBvbmx5IGluY2x1ZGUgY29uZmlnXG5cbiAgICAgIC8vIG92ZXJyaWRlIGNvbmZpZyB3aXRoIG1hcmtEZWYuY29sb3JcbiAgICAgIFtjb2xvclZnQ2hhbm5lbF06IHt2YWx1ZTogbWFya0RlZi5jb2xvcn1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGNvbmZpZ1ZhbHVlLmZpbGwgfHwgY29uZmlnVmFsdWUuc3Ryb2tlKSB7XG4gICAgLy8gaWdub3JlIGNvbmZpZy5jb2xvclxuICAgIHJldHVybiBmaWxsU3Ryb2tlTWFya0RlZkFuZENvbmZpZztcbiAgfSBlbHNlIGlmIChjb25maWdWYWx1ZS5jb2xvcikge1xuICAgIHJldHVybiB7XG4gICAgICAuLi4odHJhbnNwYXJlbnRJZk5lZWRlZCA/IHtmaWxsOiB7dmFsdWU6ICd0cmFuc3BhcmVudCd9fSA6IHt9KSxcbiAgICAgIFtjb2xvclZnQ2hhbm5lbF06IHt2YWx1ZTogY29uZmlnVmFsdWUuY29sb3J9XG4gICAgfTtcbiAgfVxuICByZXR1cm4ge307XG59XG5cbmV4cG9ydCB0eXBlIElnbm9yZSA9IFJlY29yZDwnc2l6ZScgfCAnb3JpZW50JywgJ2lnbm9yZScgfCAnaW5jbHVkZSc+O1xuXG5leHBvcnQgZnVuY3Rpb24gYmFzZUVuY29kZUVudHJ5KG1vZGVsOiBVbml0TW9kZWwsIGlnbm9yZTogSWdub3JlKSB7XG4gIHJldHVybiB7XG4gICAgLi4ubWFya0RlZlByb3BlcnRpZXMobW9kZWwubWFya0RlZiwgaWdub3JlKSxcbiAgICAuLi5jb2xvcihtb2RlbCksXG4gICAgLi4ubm9uUG9zaXRpb24oJ29wYWNpdHknLCBtb2RlbCksXG4gICAgLi4udG9vbHRpcChtb2RlbCksXG4gICAgLi4udGV4dChtb2RlbCwgJ2hyZWYnKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXJrRGVmUHJvcGVydGllcyhtYXJrOiBNYXJrRGVmLCBpZ25vcmU6IElnbm9yZSkge1xuICByZXR1cm4gVkdfTUFSS19DT05GSUdTLnJlZHVjZSgobSwgcHJvcCkgPT4ge1xuICAgIGlmIChtYXJrW3Byb3BdICE9PSB1bmRlZmluZWQgJiYgaWdub3JlW3Byb3BdICE9PSAnaWdub3JlJykge1xuICAgICAgbVtwcm9wXSA9IHt2YWx1ZTogbWFya1twcm9wXX07XG4gICAgfVxuICAgIHJldHVybiBtO1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUlmRGVmaW5lZChwcm9wOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKTogVmdFbmNvZGVFbnRyeSB7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtbcHJvcF06IHt2YWx1ZTogdmFsdWV9fTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB2YWxpZFByZWRpY2F0ZSh2Z1JlZjogc3RyaW5nKSB7XG4gIHJldHVybiBgJHt2Z1JlZn0gIT09IG51bGwgJiYgIWlzTmFOKCR7dmdSZWZ9KWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVkKG1vZGVsOiBVbml0TW9kZWwpOiBWZ0VuY29kZUVudHJ5IHtcbiAgaWYgKG1vZGVsLmNvbmZpZy5pbnZhbGlkVmFsdWVzID09PSAnZmlsdGVyJykge1xuICAgIGNvbnN0IGZpZWxkcyA9IFsneCcsICd5J10ubWFwKChjaGFubmVsOiBQb3NpdGlvblNjYWxlQ2hhbm5lbCkgPT4ge1xuICAgICAgICBjb25zdCBzY2FsZUNvbXBvbmVudCA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuICAgICAgICBpZiAoc2NhbGVDb21wb25lbnQpIHtcbiAgICAgICAgICBjb25zdCBzY2FsZVR5cGUgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3R5cGUnKTtcblxuICAgICAgICAgIC8vIERpc2NyZXRlIGRvbWFpbiBzY2FsZXMgY2FuIGhhbmRsZSBpbnZhbGlkIHZhbHVlcywgYnV0IGNvbnRpbnVvdXMgc2NhbGVzIGNhbid0LlxuICAgICAgICAgIGlmIChoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbC52Z0ZpZWxkKGNoYW5uZWwsIHtleHByOiAnZGF0dW0nfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmaWVsZCA9PiAhIWZpZWxkKVxuICAgICAgLm1hcCh2YWxpZFByZWRpY2F0ZSk7XG5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlZmluZWQ6IHtzaWduYWw6IGZpZWxkcy5qb2luKCcgJiYgJyl9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7fTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gbWl4aW5zIGZvciBub24tcG9zaXRpb25hbCBjaGFubmVscyB3aXRoIHNjYWxlcy4gIChUZXh0IGRvZXNuJ3QgaGF2ZSBzY2FsZS4pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub25Qb3NpdGlvbihjaGFubmVsOiB0eXBlb2YgTk9OUE9TSVRJT05fU0NBTEVfQ0hBTk5FTFNbMF0sIG1vZGVsOiBVbml0TW9kZWwsIG9wdDoge2RlZmF1bHRWYWx1ZT86IG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4sIHZnQ2hhbm5lbD86IHN0cmluZywgZGVmYXVsdFJlZj86IFZnVmFsdWVSZWZ9ID0ge30pOiBWZ0VuY29kZUVudHJ5IHtcbiAgY29uc3Qge2RlZmF1bHRWYWx1ZSwgdmdDaGFubmVsfSA9IG9wdDtcbiAgY29uc3QgZGVmYXVsdFJlZiA9IG9wdC5kZWZhdWx0UmVmIHx8IChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCA/IHt2YWx1ZTogZGVmYXVsdFZhbHVlfSA6IHVuZGVmaW5lZCk7XG5cbiAgY29uc3QgY2hhbm5lbERlZiA9IG1vZGVsLmVuY29kaW5nW2NoYW5uZWxdO1xuXG4gIHJldHVybiB3cmFwQ29uZGl0aW9uKG1vZGVsLCBjaGFubmVsRGVmLCB2Z0NoYW5uZWwgfHwgY2hhbm5lbCwgKGNEZWYpID0+IHtcbiAgICByZXR1cm4gcmVmLm1pZFBvaW50KFxuICAgICAgY2hhbm5lbCwgY0RlZiwgbW9kZWwuc2NhbGVOYW1lKGNoYW5uZWwpLFxuICAgICAgbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCksXG4gICAgICBudWxsLCAvLyBObyBuZWVkIHRvIHByb3ZpZGUgc3RhY2sgZm9yIG5vbi1wb3NpdGlvbiBhcyBpdCBkb2VzIG5vdCBhZmZlY3QgbWlkIHBvaW50XG4gICAgICBkZWZhdWx0UmVmXG4gICAgKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgbWl4aW4gdGhhdCBpbmNsdWRlIGEgVmVnYSBwcm9kdWN0aW9uIHJ1bGUgZm9yIGEgVmVnYS1MaXRlIGNvbmRpdGlvbmFsIGNoYW5uZWwgZGVmaW5pdGlvbi5cbiAqIG9yIGEgc2ltcGxlIG1peGluIGlmIGNoYW5uZWwgZGVmIGhhcyBubyBjb25kaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQ29uZGl0aW9uKFxuICAgIG1vZGVsOiBVbml0TW9kZWwsIGNoYW5uZWxEZWY6IENoYW5uZWxEZWY8c3RyaW5nPiwgdmdDaGFubmVsOiBzdHJpbmcsXG4gICAgcmVmRm46IChjRGVmOiBDaGFubmVsRGVmPHN0cmluZz4pID0+IFZnVmFsdWVSZWZcbiAgKTogVmdFbmNvZGVFbnRyeSB7XG4gIGNvbnN0IGNvbmRpdGlvbiA9IGNoYW5uZWxEZWYgJiYgY2hhbm5lbERlZi5jb25kaXRpb247XG4gIGNvbnN0IHZhbHVlUmVmID0gcmVmRm4oY2hhbm5lbERlZik7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICBjb25zdCBjb25kaXRpb25zID0gaXNBcnJheShjb25kaXRpb24pID8gY29uZGl0aW9uIDogW2NvbmRpdGlvbl07XG4gICAgY29uc3QgdmdDb25kaXRpb25zID0gY29uZGl0aW9ucy5tYXAoKGMpID0+IHtcbiAgICAgIGNvbnN0IGNvbmRpdGlvblZhbHVlUmVmID0gcmVmRm4oYyk7XG4gICAgICBjb25zdCB0ZXN0ID0gaXNDb25kaXRpb25hbFNlbGVjdGlvbihjKSA/IHNlbGVjdGlvblByZWRpY2F0ZShtb2RlbCwgYy5zZWxlY3Rpb24pIDogZXhwcmVzc2lvbihtb2RlbCwgYy50ZXN0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRlc3QsXG4gICAgICAgIC4uLmNvbmRpdGlvblZhbHVlUmVmXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBbdmdDaGFubmVsXTogW1xuICAgICAgICAuLi52Z0NvbmRpdGlvbnMsXG4gICAgICAgIC4uLih2YWx1ZVJlZiAhPT0gdW5kZWZpbmVkID8gW3ZhbHVlUmVmXSA6IFtdKVxuICAgICAgXVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlUmVmICE9PSB1bmRlZmluZWQgPyB7W3ZnQ2hhbm5lbF06IHZhbHVlUmVmfSA6IHt9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b29sdGlwKG1vZGVsOiBVbml0TW9kZWwpIHtcbiAgY29uc3QgY2hhbm5lbCA9ICd0b29sdGlwJztcbiAgY29uc3QgY2hhbm5lbERlZiA9IG1vZGVsLmVuY29kaW5nW2NoYW5uZWxdO1xuICBpZiAoaXNBcnJheShjaGFubmVsRGVmKSkge1xuICAgIGNvbnN0IGtleVZhbHVlcyA9IGNoYW5uZWxEZWYubWFwKChmaWVsZERlZikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gZmllbGREZWYudGl0bGUgIT09IHVuZGVmaW5lZCA/IGZpZWxkRGVmLnRpdGxlIDogdmdGaWVsZChmaWVsZERlZiwge2JpblN1ZmZpeDogJ3JhbmdlJ30pO1xuICAgICAgY29uc3QgdmFsdWUgPSByZWYudGV4dChmaWVsZERlZiwgbW9kZWwuY29uZmlnKS5zaWduYWw7XG4gICAgICByZXR1cm4gYFwiJHtrZXl9XCI6ICR7dmFsdWV9YDtcbiAgICB9KTtcbiAgICByZXR1cm4ge3Rvb2x0aXA6IHtzaWduYWw6IGB7JHtrZXlWYWx1ZXMuam9pbignLCAnKX19YH19O1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIG5vdCBhbiBhcnJheSwgYmVoYXZlIGp1c3QgbGlrZSB0ZXh0XG4gICAgcmV0dXJuIHRleHRDb21tb24obW9kZWwsIGNoYW5uZWwsIGNoYW5uZWxEZWYpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0KG1vZGVsOiBVbml0TW9kZWwsIGNoYW5uZWw6ICd0ZXh0JyB8ICdocmVmJyA9ICd0ZXh0Jykge1xuICBjb25zdCBjaGFubmVsRGVmID0gbW9kZWwuZW5jb2RpbmdbY2hhbm5lbF07XG4gIHJldHVybiB0ZXh0Q29tbW9uKG1vZGVsLCBjaGFubmVsLCBjaGFubmVsRGVmKTtcbn1cblxuZnVuY3Rpb24gdGV4dENvbW1vbihtb2RlbDogVW5pdE1vZGVsLCBjaGFubmVsOiAndGV4dCcgfCAnaHJlZicgfCAndG9vbHRpcCcsIGNoYW5uZWxEZWY6IEZpZWxkRGVmV2l0aENvbmRpdGlvbjxUZXh0RmllbGREZWY8c3RyaW5nPj4gfCBWYWx1ZURlZldpdGhDb25kaXRpb248VGV4dEZpZWxkRGVmPHN0cmluZz4+KSB7XG4gIHJldHVybiB3cmFwQ29uZGl0aW9uKG1vZGVsLCBjaGFubmVsRGVmLCBjaGFubmVsLCAoY0RlZikgPT4gcmVmLnRleHQoY0RlZiwgbW9kZWwuY29uZmlnKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYW5kUG9zaXRpb24oZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4sIGNoYW5uZWw6ICd4J3wneScsIG1vZGVsOiBVbml0TW9kZWwpIHtcbiAgY29uc3Qgc2NhbGVOYW1lID0gbW9kZWwuc2NhbGVOYW1lKGNoYW5uZWwpO1xuICBjb25zdCBzaXplQ2hhbm5lbCA9IGNoYW5uZWwgPT09ICd4JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAobW9kZWwuZW5jb2Rpbmcuc2l6ZSB8fCBtb2RlbC5tYXJrRGVmLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IG9yaWVudCA9IG1vZGVsLm1hcmtEZWYub3JpZW50O1xuICAgIGlmIChvcmllbnQpIHtcbiAgICAgIGNvbnN0IGNlbnRlcmVkQmFuZFBvc2l0aW9uTWl4aW5zID0ge1xuICAgICAgICAvLyBVc2UgeGMveWMgYW5kIHBsYWNlIHRoZSBtYXJrIGF0IHRoZSBtaWRkbGUgb2YgdGhlIGJhbmRcbiAgICAgICAgLy8gVGhpcyB3YXkgd2UgbmV2ZXIgaGF2ZSB0byBkZWFsIHdpdGggc2l6ZSdzIGNvbmRpdGlvbiBmb3IgeC95IHBvc2l0aW9uLlxuICAgICAgICBbY2hhbm5lbCsnYyddOiByZWYuZmllbGRSZWYoZmllbGREZWYsIHNjYWxlTmFtZSwge30sIHtiYW5kOiAwLjV9KVxuICAgICAgfTtcblxuICAgICAgaWYgKGdldEZpZWxkRGVmKG1vZGVsLmVuY29kaW5nLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uY2VudGVyZWRCYW5kUG9zaXRpb25NaXhpbnMsXG4gICAgICAgICAgLi4ubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge3ZnQ2hhbm5lbDogc2l6ZUNoYW5uZWx9KVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChpc1ZhbHVlRGVmKG1vZGVsLmVuY29kaW5nLnNpemUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uY2VudGVyZWRCYW5kUG9zaXRpb25NaXhpbnMsXG4gICAgICAgICAgLi4ubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge3ZnQ2hhbm5lbDogc2l6ZUNoYW5uZWx9KVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChtb2RlbC5tYXJrRGVmLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmNlbnRlcmVkQmFuZFBvc2l0aW9uTWl4aW5zLFxuICAgICAgICAgIFtzaXplQ2hhbm5lbF06IHt2YWx1ZTogbW9kZWwubWFya0RlZi5zaXplfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5jYW5ub3RBcHBseVNpemVUb05vbk9yaWVudGVkTWFyayhtb2RlbC5tYXJrRGVmLnR5cGUpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBbY2hhbm5lbF06IHJlZi5maWVsZFJlZihmaWVsZERlZiwgc2NhbGVOYW1lLCB7YmluU3VmZml4OiAncmFuZ2UnfSksXG4gICAgW3NpemVDaGFubmVsXTogcmVmLmJhbmRSZWYoc2NhbGVOYW1lKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VudGVyZWRCYW5kUG9zaXRpb24oY2hhbm5lbDogJ3gnIHwgJ3knLCBtb2RlbDogVW5pdE1vZGVsLCBkZWZhdWx0UG9zUmVmOiBWZ1ZhbHVlUmVmLCBkZWZhdWx0U2l6ZVJlZjogVmdWYWx1ZVJlZikge1xuICBjb25zdCBjZW50ZXJDaGFubmVsOiAneGMnIHwgJ3ljJyA9IGNoYW5uZWwgPT09ICd4JyA/ICd4YycgOiAneWMnO1xuICBjb25zdCBzaXplQ2hhbm5lbCA9IGNoYW5uZWwgPT09ICd4JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgcmV0dXJuIHtcbiAgICAuLi5wb2ludFBvc2l0aW9uKGNoYW5uZWwsIG1vZGVsLCBkZWZhdWx0UG9zUmVmLCBjZW50ZXJDaGFubmVsKSxcbiAgICAuLi5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsLCB7ZGVmYXVsdFJlZjogZGVmYXVsdFNpemVSZWYsIHZnQ2hhbm5lbDogc2l6ZUNoYW5uZWx9KVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmlubmVkUG9zaXRpb24oZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4sIGNoYW5uZWw6ICd4J3wneScsIHNjYWxlTmFtZTogc3RyaW5nLCBzcGFjaW5nOiBudW1iZXIsIHJldmVyc2U6IGJvb2xlYW4pIHtcbiAgaWYgKGNoYW5uZWwgPT09ICd4Jykge1xuICAgIHJldHVybiB7XG4gICAgICB4MjogcmVmLmJpbihmaWVsZERlZiwgc2NhbGVOYW1lLCAnc3RhcnQnLCByZXZlcnNlID8gMCA6IHNwYWNpbmcpLFxuICAgICAgeDogcmVmLmJpbihmaWVsZERlZiwgc2NhbGVOYW1lLCAnZW5kJywgcmV2ZXJzZSA/IHNwYWNpbmcgOiAwKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHkyOiByZWYuYmluKGZpZWxkRGVmLCBzY2FsZU5hbWUsICdzdGFydCcsIHJldmVyc2UgPyBzcGFjaW5nIDogMCksXG4gICAgICB5OiByZWYuYmluKGZpZWxkRGVmLCBzY2FsZU5hbWUsICdlbmQnLCByZXZlcnNlID8gMCA6IHNwYWNpbmcpXG4gICAgfTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmV0dXJuIG1peGlucyBmb3IgcG9pbnQgKG5vbi1iYW5kKSBwb3NpdGlvbiBjaGFubmVscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvaW50UG9zaXRpb24oY2hhbm5lbDogJ3gnfCd5JywgbW9kZWw6IFVuaXRNb2RlbCwgZGVmYXVsdFJlZjogVmdWYWx1ZVJlZiB8ICd6ZXJvT3JNaW4nIHwgJ3plcm9Pck1heCcsIHZnQ2hhbm5lbD86ICd4J3wneSd8J3hjJ3wneWMnKSB7XG4gIC8vIFRPRE86IHJlZmFjdG9yIGhvdyByZWZlciB0byBzY2FsZSBhcyBkaXNjdXNzZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3ZlZ2EvdmVnYS1saXRlL3B1bGwvMTYxM1xuXG4gIGNvbnN0IHtlbmNvZGluZywgbWFyaywgc3RhY2t9ID0gbW9kZWw7XG5cbiAgY29uc3QgY2hhbm5lbERlZiA9IGVuY29kaW5nW2NoYW5uZWxdO1xuICBjb25zdCBzY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoY2hhbm5lbCk7XG4gIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG5cblxuICBjb25zdCBvZmZzZXQgPSByZWYuZ2V0T2Zmc2V0KGNoYW5uZWwsIG1vZGVsLm1hcmtEZWYpO1xuXG5cbiAgY29uc3QgdmFsdWVSZWYgPSAhY2hhbm5lbERlZiAmJiAoZW5jb2RpbmcubGF0aXR1ZGUgfHwgZW5jb2RpbmcubG9uZ2l0dWRlKSA/XG4gICAgLy8gdXNlIGdlb3BvaW50IG91dHB1dCBpZiB0aGVyZSBhcmUgbGF0L2xvbmcgYW5kIHRoZXJlIGlzIG5vIHBvaW50IHBvc2l0aW9uIG92ZXJyaWRpbmcgbGF0L2xvbmcuXG4gICAge2ZpZWxkOiBtb2RlbC5nZXROYW1lKGNoYW5uZWwpfSA6XG4gICAge1xuICAgICAgLi4ucmVmLnN0YWNrYWJsZShjaGFubmVsLCBlbmNvZGluZ1tjaGFubmVsXSwgc2NhbGVOYW1lLCBzY2FsZSwgc3RhY2ssXG4gICAgICAgIHJlZi5nZXREZWZhdWx0UmVmKGRlZmF1bHRSZWYsIGNoYW5uZWwsIHNjYWxlTmFtZSwgc2NhbGUsIG1hcmspXG4gICAgICApLFxuICAgICAuLi4ob2Zmc2V0ID8ge29mZnNldH06IHt9KVxuICAgIH07XG5cbiAgcmV0dXJuIHtcbiAgICBbdmdDaGFubmVsIHx8IGNoYW5uZWxdOiB2YWx1ZVJlZlxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiBtaXhpbnMgZm9yIHgyLCB5Mi5cbiAqIElmIGNoYW5uZWwgaXMgbm90IHNwZWNpZmllZCwgcmV0dXJuIG9uZSBjaGFubmVsIGJhc2VkIG9uIG9yaWVudGF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRQb3NpdGlvbjIobW9kZWw6IFVuaXRNb2RlbCwgZGVmYXVsdFJlZjogJ3plcm9Pck1pbicgfCAnemVyb09yTWF4JywgY2hhbm5lbDogJ3gyJyB8ICd5MicpIHtcbiAgY29uc3Qge2VuY29kaW5nLCBtYXJrLCBzdGFja30gPSBtb2RlbDtcblxuICBjb25zdCBiYXNlQ2hhbm5lbCA9IGNoYW5uZWwgPT09ICd4MicgPyAneCcgOiAneSc7XG4gIGNvbnN0IGNoYW5uZWxEZWYgPSBlbmNvZGluZ1tiYXNlQ2hhbm5lbF07XG4gIGNvbnN0IHNjYWxlTmFtZSA9IG1vZGVsLnNjYWxlTmFtZShiYXNlQ2hhbm5lbCk7XG4gIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoYmFzZUNoYW5uZWwpO1xuXG4gIGNvbnN0IG9mZnNldCA9IHJlZi5nZXRPZmZzZXQoY2hhbm5lbCwgbW9kZWwubWFya0RlZik7XG5cbiAgY29uc3QgdmFsdWVSZWYgPSAhY2hhbm5lbERlZiAmJiAoZW5jb2RpbmcubGF0aXR1ZGUgfHwgZW5jb2RpbmcubG9uZ2l0dWRlKSA/XG4gICAgLy8gdXNlIGdlb3BvaW50IG91dHB1dCBpZiB0aGVyZSBhcmUgbGF0Mi9sb25nMiBhbmQgdGhlcmUgaXMgbm8gcG9pbnQgcG9zaXRpb24yIG92ZXJyaWRpbmcgbGF0Mi9sb25nMi5cbiAgICB7ZmllbGQ6IG1vZGVsLmdldE5hbWUoY2hhbm5lbCl9OlxuICAgIHtcbiAgICAgIC4uLnJlZi5zdGFja2FibGUyKGNoYW5uZWwsIGNoYW5uZWxEZWYsIGVuY29kaW5nW2NoYW5uZWxdLCBzY2FsZU5hbWUsIHNjYWxlLCBzdGFjayxcbiAgICAgICAgcmVmLmdldERlZmF1bHRSZWYoZGVmYXVsdFJlZiwgYmFzZUNoYW5uZWwsIHNjYWxlTmFtZSwgc2NhbGUsIG1hcmspXG4gICAgICApLFxuICAgICAgLi4uKG9mZnNldCA/IHtvZmZzZXR9IDoge30pXG4gICAgfTtcblxuICByZXR1cm4ge1tjaGFubmVsXTogdmFsdWVSZWZ9O1xufVxuIl19","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/mark/mixins.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/mark/mixins.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar predicate_1 = require(\"../../predicate\");\nvar scale_1 = require(\"../../scale\");\nvar util_1 = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar common_1 = require(\"../common\");\nvar selection_1 = require(\"../selection/selection\");\nvar ref = require(\"./valueref\");\nfunction color(model, opt) {\n    if (opt === void 0) { opt = { valueOnly: false }; }\n    var markDef = model.markDef, encoding = model.encoding, config = model.config;\n    var filled = markDef.filled, markType = markDef.type;\n    var configValue = {\n        fill: common_1.getMarkConfig('fill', markDef, config),\n        stroke: common_1.getMarkConfig('stroke', markDef, config),\n        color: common_1.getMarkConfig('color', markDef, config)\n    };\n    var transparentIfNeeded = util_1.contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n    var defaultValue = {\n        fill: markDef.fill || configValue.fill ||\n            // If there is no fill, always fill symbols, bar, geoshape\n            // with transparent fills https://github.com/vega/vega-lite/issues/1316\n            transparentIfNeeded,\n        stroke: markDef.stroke || configValue.stroke\n    };\n    var colorVgChannel = filled ? 'fill' : 'stroke';\n    var fillStrokeMarkDefAndConfig = tslib_1.__assign({}, (defaultValue.fill ? {\n        fill: { value: defaultValue.fill }\n    } : {}), (defaultValue.stroke ? {\n        stroke: { value: defaultValue.stroke }\n    } : {}));\n    if (encoding.fill || encoding.stroke) {\n        // ignore encoding.color, markDef.color, config.color\n        if (markDef.color) {\n            // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n        }\n        return tslib_1.__assign({}, nonPosition('fill', model, { defaultValue: defaultValue.fill || transparentIfNeeded }), nonPosition('stroke', model, { defaultValue: defaultValue.stroke }));\n    }\n    else if (encoding.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {\n            vgChannel: colorVgChannel,\n            // apply default fill/stroke first, then color config, then transparent if needed.\n            defaultValue: markDef[colorVgChannel] || markDef.color || configValue[colorVgChannel] || configValue.color || (filled ? transparentIfNeeded : undefined)\n        }));\n    }\n    else if (markDef.fill || markDef.stroke) {\n        // Ignore markDef.color, config.color\n        if (markDef.color) {\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n        }\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (markDef.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, (_a = {}, _a[colorVgChannel] = { value: markDef.color }, _a));\n    }\n    else if (configValue.fill || configValue.stroke) {\n        // ignore config.color\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (configValue.color) {\n        return tslib_1.__assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), (_b = {}, _b[colorVgChannel] = { value: configValue.color }, _b));\n    }\n    return {};\n    var _a, _b;\n}\nexports.color = color;\nfunction baseEncodeEntry(model, ignore) {\n    return tslib_1.__assign({}, markDefProperties(model.markDef, ignore), color(model), nonPosition('opacity', model), tooltip(model), text(model, 'href'));\n}\nexports.baseEncodeEntry = baseEncodeEntry;\nfunction markDefProperties(mark, ignore) {\n    return vega_schema_1.VG_MARK_CONFIGS.reduce(function (m, prop) {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nfunction valueIfDefined(prop, value) {\n    if (value !== undefined) {\n        return _a = {}, _a[prop] = { value: value }, _a;\n    }\n    return undefined;\n    var _a;\n}\nexports.valueIfDefined = valueIfDefined;\nfunction validPredicate(vgRef) {\n    return vgRef + \" !== null && !isNaN(\" + vgRef + \")\";\n}\nfunction defined(model) {\n    if (model.config.invalidValues === 'filter') {\n        var fields = ['x', 'y'].map(function (channel) {\n            var scaleComponent = model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // Discrete domain scales can handle invalid values, but continuous scales can't.\n                if (scale_1.hasContinuousDomain(scaleType)) {\n                    return model.vgField(channel, { expr: 'datum' });\n                }\n            }\n            return undefined;\n        })\n            .filter(function (field) { return !!field; })\n            .map(validPredicate);\n        if (fields.length > 0) {\n            return {\n                defined: { signal: fields.join(' && ') }\n            };\n        }\n    }\n    return {};\n}\nexports.defined = defined;\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nfunction nonPosition(channel, model, opt) {\n    if (opt === void 0) { opt = {}; }\n    var defaultValue = opt.defaultValue, vgChannel = opt.vgChannel;\n    var defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);\n    var channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel || channel, function (cDef) {\n        return ref.midPoint(channel, cDef, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point\n        defaultRef);\n    });\n}\nexports.nonPosition = nonPosition;\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nfunction wrapCondition(model, channelDef, vgChannel, refFn) {\n    var condition = channelDef && channelDef.condition;\n    var valueRef = refFn(channelDef);\n    if (condition) {\n        var conditions = vega_util_1.isArray(condition) ? condition : [condition];\n        var vgConditions = conditions.map(function (c) {\n            var conditionValueRef = refFn(c);\n            var test = fielddef_1.isConditionalSelection(c) ? selection_1.selectionPredicate(model, c.selection) : predicate_1.expression(model, c.test);\n            return tslib_1.__assign({ test: test }, conditionValueRef);\n        });\n        return _a = {},\n            _a[vgChannel] = vgConditions.concat((valueRef !== undefined ? [valueRef] : [])),\n            _a;\n    }\n    else {\n        return valueRef !== undefined ? (_b = {}, _b[vgChannel] = valueRef, _b) : {};\n    }\n    var _a, _b;\n}\nexports.wrapCondition = wrapCondition;\nfunction tooltip(model) {\n    var channel = 'tooltip';\n    var channelDef = model.encoding[channel];\n    if (vega_util_1.isArray(channelDef)) {\n        var keyValues = channelDef.map(function (fieldDef) {\n            var key = fieldDef.title !== undefined ? fieldDef.title : fielddef_1.vgField(fieldDef, { binSuffix: 'range' });\n            var value = ref.text(fieldDef, model.config).signal;\n            return \"\\\"\" + key + \"\\\": \" + value;\n        });\n        return { tooltip: { signal: \"{\" + keyValues.join(', ') + \"}\" } };\n    }\n    else {\n        // if not an array, behave just like text\n        return textCommon(model, channel, channelDef);\n    }\n}\nexports.tooltip = tooltip;\nfunction text(model, channel) {\n    if (channel === void 0) { channel = 'text'; }\n    var channelDef = model.encoding[channel];\n    return textCommon(model, channel, channelDef);\n}\nexports.text = text;\nfunction textCommon(model, channel, channelDef) {\n    return wrapCondition(model, channelDef, channel, function (cDef) { return ref.text(cDef, model.config); });\n}\nfunction bandPosition(fieldDef, channel, model) {\n    var scaleName = model.scaleName(channel);\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size || model.markDef.size !== undefined) {\n        var orient = model.markDef.orient;\n        if (orient) {\n            var centeredBandPositionMixins = (_a = {},\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                _a[channel + 'c'] = ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 }),\n                _a);\n            if (fielddef_1.getFieldDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (fielddef_1.isValueDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, (_b = {}, _b[sizeChannel] = { value: model.markDef.size }, _b));\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    return _c = {},\n        _c[channel] = ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),\n        _c[sizeChannel] = ref.bandRef(scaleName),\n        _c;\n    var _a, _b, _c;\n}\nexports.bandPosition = bandPosition;\nfunction centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {\n    var centerChannel = channel === 'x' ? 'xc' : 'yc';\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    return tslib_1.__assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexports.centeredBandPosition = centeredBandPosition;\nfunction binnedPosition(fieldDef, channel, scaleName, spacing, reverse) {\n    if (channel === 'x') {\n        return {\n            x2: ref.bin(fieldDef, scaleName, 'start', reverse ? 0 : spacing),\n            x: ref.bin(fieldDef, scaleName, 'end', reverse ? spacing : 0)\n        };\n    }\n    else {\n        return {\n            y2: ref.bin(fieldDef, scaleName, 'start', reverse ? spacing : 0),\n            y: ref.bin(fieldDef, scaleName, 'end', reverse ? 0 : spacing)\n        };\n    }\n}\nexports.binnedPosition = binnedPosition;\n/**\n * Return mixins for point (non-band) position channels.\n */\nfunction pointPosition(channel, model, defaultRef, vgChannel) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var channelDef = encoding[channel];\n    var scaleName = model.scaleName(channel);\n    var scale = model.getScaleComponent(channel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable(channel, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {},\n        _a[vgChannel || channel] = valueRef,\n        _a;\n    var _a;\n}\nexports.pointPosition = pointPosition;\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nfunction pointPosition2(model, defaultRef, channel) {\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var baseChannel = channel === 'x2' ? 'x' : 'y';\n    var channelDef = encoding[baseChannel];\n    var scaleName = model.scaleName(baseChannel);\n    var scale = model.getScaleComponent(baseChannel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable2(channel, channelDef, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {}, _a[channel] = valueRef, _a;\n    var _a;\n}\nexports.pointPosition2 = pointPosition2;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":274}},"hash":"81233a9bf3d535cd0980241e62bd5541","cacheData":{"env":{}}}