{"dependencies":[{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\package.json","includedInParent":true,"mtime":1537759548368},{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\.babelrc","includedInParent":true,"mtime":1536780611616},{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\node_modules\\vega-lite\\build\\src\\package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22}},{"name":"vega-util","loc":{"line":4,"column":26}},{"name":"../../aggregate","loc":{"line":5,"column":26}},{"name":"../../datetime","loc":{"line":6,"column":25}},{"name":"../../fielddef","loc":{"line":7,"column":25}},{"name":"../../log","loc":{"line":8,"column":18}},{"name":"../../logical","loc":{"line":9,"column":24}},{"name":"../../predicate","loc":{"line":10,"column":26}},{"name":"../../sort","loc":{"line":11,"column":21}},{"name":"../../util","loc":{"line":12,"column":21}},{"name":"../model","loc":{"line":13,"column":22}},{"name":"../split","loc":{"line":14,"column":22}},{"name":"./dataflow","loc":{"line":15,"column":25}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar aggregate_1 = require(\"../../aggregate\");\nvar datetime_1 = require(\"../../datetime\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar logical_1 = require(\"../../logical\");\nvar predicate_1 = require(\"../../predicate\");\nvar sort_1 = require(\"../../sort\");\nvar util_1 = require(\"../../util\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    var f = util_1.accessPathWithDatum(field);\n    if (parse === 'number') {\n        return \"toNumber(\" + f + \")\";\n    }\n    else if (parse === 'boolean') {\n        return \"toBoolean(\" + f + \")\";\n    }\n    else if (parse === 'string') {\n        return \"toString(\" + f + \")\";\n    }\n    else if (parse === 'date') {\n        return \"toDate(\" + f + \")\";\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        var specifier = parse.slice(5, parse.length);\n        return \"timeParse(\" + f + \",\" + specifier + \")\";\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        var specifier = parse.slice(4, parse.length);\n        return \"utcParse(\" + f + \",\" + specifier + \")\";\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nvar ParseNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ParseNode, _super);\n    function ParseNode(parent, parse) {\n        var _this = _super.call(this, parent) || this;\n        _this._parse = parse;\n        return _this;\n    }\n    ParseNode.prototype.clone = function () {\n        return new ParseNode(null, util_1.duplicate(this._parse));\n    };\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n    ParseNode.makeExplicit = function (parent, model, ancestorParse) {\n        // Custom parse\n        var explicit = {};\n        var data = model.data;\n        if (data && data.format && data.format.parse) {\n            explicit = data.format.parse;\n        }\n        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    };\n    ParseNode.makeImplicitFromFilterTransform = function (parent, transform, ancestorParse) {\n        var parse = {};\n        logical_1.forEachLeaf(transform.filter, function (filter) {\n            if (predicate_1.isFieldPredicate(filter)) {\n                // Automatically add a parse node for filters with filter objects\n                var val = null;\n                // For EqualFilter, just use the equal property.\n                // For RangeFilter and OneOfFilter, all array members should have\n                // the same type, so we only use the first one.\n                if (predicate_1.isFieldEqualPredicate(filter)) {\n                    val = filter.equal;\n                }\n                else if (predicate_1.isFieldRangePredicate(filter)) {\n                    val = filter.range[0];\n                }\n                else if (predicate_1.isFieldOneOfPredicate(filter)) {\n                    val = (filter.oneOf || filter['in'])[0];\n                } // else -- for filter expression, we can't infer anything\n                if (val) {\n                    if (datetime_1.isDateTime(val)) {\n                        parse[filter.field] = 'date';\n                    }\n                    else if (vega_util_1.isNumber(val)) {\n                        parse[filter.field] = 'number';\n                    }\n                    else if (vega_util_1.isString(val)) {\n                        parse[filter.field] = 'string';\n                    }\n                }\n                if (filter.timeUnit) {\n                    parse[filter.field] = 'date';\n                }\n            }\n        });\n        if (util_1.keys(parse).length === 0) {\n            return null;\n        }\n        return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n    };\n    /**\n     * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n     */\n    ParseNode.makeImplicitFromEncoding = function (parent, model, ancestorParse) {\n        var implicit = {};\n        if (model_1.isUnitModel(model) || model_1.isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef(function (fieldDef) {\n                if (fielddef_1.isTimeFieldDef(fieldDef)) {\n                    implicit[fieldDef.field] = 'date';\n                }\n                else if (fielddef_1.isNumberFieldDef(fieldDef)) {\n                    if (!aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {\n                        implicit[fieldDef.field] = 'number';\n                    }\n                }\n                else if (util_1.accessPathDepth(fieldDef.field) > 1) {\n                    // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                    // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                    if (!(fieldDef.field in implicit)) {\n                        implicit[fieldDef.field] = 'flatten';\n                    }\n                }\n                else if (fielddef_1.isScaleFieldDef(fieldDef) && sort_1.isSortField(fieldDef.sort) && util_1.accessPathDepth(fieldDef.sort.field) > 1) {\n                    // Flatten fields that we sort by but that are not otherwise flattened.\n                    if (!(fieldDef.sort.field in implicit)) {\n                        implicit[fieldDef.sort.field] = 'flatten';\n                    }\n                }\n            });\n        }\n        return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n    };\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n    ParseNode.makeWithAncestors = function (parent, explicit, implicit, ancestorParse) {\n        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n        for (var _i = 0, _a = util_1.keys(implicit); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var parsedAs = ancestorParse.getWithExplicit(field);\n            if (parsedAs.value !== undefined) {\n                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n                if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\n                    delete implicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n                }\n            }\n        }\n        for (var _b = 0, _c = util_1.keys(explicit); _b < _c.length; _b++) {\n            var field = _c[_b];\n            var parsedAs = ancestorParse.get(field);\n            if (parsedAs !== undefined) {\n                // Don't parse a field again if it has been parsed with the same type already.\n                if (parsedAs === explicit[field]) {\n                    delete explicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n                }\n            }\n        }\n        var parse = new split_1.Split(explicit, implicit);\n        // add the format parse from this model so that children don't parse the same field again\n        ancestorParse.copyAll(parse);\n        // copy only non-null parses\n        var p = {};\n        for (var _d = 0, _e = util_1.keys(parse.combine()); _d < _e.length; _d++) {\n            var key = _e[_d];\n            var val = parse.get(key);\n            if (val !== null) {\n                p[key] = val;\n            }\n        }\n        if (util_1.keys(p).length === 0 || ancestorParse.parseNothing) {\n            return null;\n        }\n        return new ParseNode(parent, p);\n    };\n    Object.defineProperty(ParseNode.prototype, \"parse\", {\n        get: function () {\n            return this._parse;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParseNode.prototype.merge = function (other) {\n        this._parse = tslib_1.__assign({}, this._parse, other.parse);\n        other.remove();\n    };\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n    ParseNode.prototype.assembleFormatParse = function () {\n        var formatParse = {};\n        for (var _i = 0, _a = util_1.keys(this._parse); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var p = this._parse[field];\n            if (util_1.accessPathDepth(field) === 1) {\n                formatParse[field] = p;\n            }\n        }\n        return formatParse;\n    };\n    // format parse depends and produces all fields in its parse\n    ParseNode.prototype.producedFields = function () {\n        return vega_util_1.toSet(util_1.keys(this._parse));\n    };\n    ParseNode.prototype.dependentFields = function () {\n        return vega_util_1.toSet(util_1.keys(this._parse));\n    };\n    ParseNode.prototype.assembleTransforms = function (onlyNested) {\n        var _this = this;\n        if (onlyNested === void 0) { onlyNested = false; }\n        return util_1.keys(this._parse)\n            .filter(function (field) { return onlyNested ? util_1.accessPathDepth(field) > 1 : true; })\n            .map(function (field) {\n            var expr = parseExpression(field, _this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            var formula = {\n                type: 'formula',\n                expr: expr,\n                as: util_1.removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        }).filter(function (t) { return t !== null; });\n    };\n    return ParseNode;\n}(dataflow_1.DataFlowNode));\nexports.ParseNode = ParseNode;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}}],"sources":{"node_modules\\vega-lite\\build\\src\\compile\\data\\formatparse.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar aggregate_1 = require(\"../../aggregate\");\nvar datetime_1 = require(\"../../datetime\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar log = require(\"../../log\");\nvar logical_1 = require(\"../../logical\");\nvar predicate_1 = require(\"../../predicate\");\nvar sort_1 = require(\"../../sort\");\nvar util_1 = require(\"../../util\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    var f = util_1.accessPathWithDatum(field);\n    if (parse === 'number') {\n        return \"toNumber(\" + f + \")\";\n    }\n    else if (parse === 'boolean') {\n        return \"toBoolean(\" + f + \")\";\n    }\n    else if (parse === 'string') {\n        return \"toString(\" + f + \")\";\n    }\n    else if (parse === 'date') {\n        return \"toDate(\" + f + \")\";\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        var specifier = parse.slice(5, parse.length);\n        return \"timeParse(\" + f + \",\" + specifier + \")\";\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        var specifier = parse.slice(4, parse.length);\n        return \"utcParse(\" + f + \",\" + specifier + \")\";\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nvar ParseNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ParseNode, _super);\n    function ParseNode(parent, parse) {\n        var _this = _super.call(this, parent) || this;\n        _this._parse = parse;\n        return _this;\n    }\n    ParseNode.prototype.clone = function () {\n        return new ParseNode(null, util_1.duplicate(this._parse));\n    };\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n    ParseNode.makeExplicit = function (parent, model, ancestorParse) {\n        // Custom parse\n        var explicit = {};\n        var data = model.data;\n        if (data && data.format && data.format.parse) {\n            explicit = data.format.parse;\n        }\n        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    };\n    ParseNode.makeImplicitFromFilterTransform = function (parent, transform, ancestorParse) {\n        var parse = {};\n        logical_1.forEachLeaf(transform.filter, function (filter) {\n            if (predicate_1.isFieldPredicate(filter)) {\n                // Automatically add a parse node for filters with filter objects\n                var val = null;\n                // For EqualFilter, just use the equal property.\n                // For RangeFilter and OneOfFilter, all array members should have\n                // the same type, so we only use the first one.\n                if (predicate_1.isFieldEqualPredicate(filter)) {\n                    val = filter.equal;\n                }\n                else if (predicate_1.isFieldRangePredicate(filter)) {\n                    val = filter.range[0];\n                }\n                else if (predicate_1.isFieldOneOfPredicate(filter)) {\n                    val = (filter.oneOf || filter['in'])[0];\n                } // else -- for filter expression, we can't infer anything\n                if (val) {\n                    if (datetime_1.isDateTime(val)) {\n                        parse[filter.field] = 'date';\n                    }\n                    else if (vega_util_1.isNumber(val)) {\n                        parse[filter.field] = 'number';\n                    }\n                    else if (vega_util_1.isString(val)) {\n                        parse[filter.field] = 'string';\n                    }\n                }\n                if (filter.timeUnit) {\n                    parse[filter.field] = 'date';\n                }\n            }\n        });\n        if (util_1.keys(parse).length === 0) {\n            return null;\n        }\n        return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n    };\n    /**\n     * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n     */\n    ParseNode.makeImplicitFromEncoding = function (parent, model, ancestorParse) {\n        var implicit = {};\n        if (model_1.isUnitModel(model) || model_1.isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef(function (fieldDef) {\n                if (fielddef_1.isTimeFieldDef(fieldDef)) {\n                    implicit[fieldDef.field] = 'date';\n                }\n                else if (fielddef_1.isNumberFieldDef(fieldDef)) {\n                    if (!aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {\n                        implicit[fieldDef.field] = 'number';\n                    }\n                }\n                else if (util_1.accessPathDepth(fieldDef.field) > 1) {\n                    // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                    // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                    if (!(fieldDef.field in implicit)) {\n                        implicit[fieldDef.field] = 'flatten';\n                    }\n                }\n                else if (fielddef_1.isScaleFieldDef(fieldDef) && sort_1.isSortField(fieldDef.sort) && util_1.accessPathDepth(fieldDef.sort.field) > 1) {\n                    // Flatten fields that we sort by but that are not otherwise flattened.\n                    if (!(fieldDef.sort.field in implicit)) {\n                        implicit[fieldDef.sort.field] = 'flatten';\n                    }\n                }\n            });\n        }\n        return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n    };\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n    ParseNode.makeWithAncestors = function (parent, explicit, implicit, ancestorParse) {\n        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n        for (var _i = 0, _a = util_1.keys(implicit); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var parsedAs = ancestorParse.getWithExplicit(field);\n            if (parsedAs.value !== undefined) {\n                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n                if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\n                    delete implicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n                }\n            }\n        }\n        for (var _b = 0, _c = util_1.keys(explicit); _b < _c.length; _b++) {\n            var field = _c[_b];\n            var parsedAs = ancestorParse.get(field);\n            if (parsedAs !== undefined) {\n                // Don't parse a field again if it has been parsed with the same type already.\n                if (parsedAs === explicit[field]) {\n                    delete explicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n                }\n            }\n        }\n        var parse = new split_1.Split(explicit, implicit);\n        // add the format parse from this model so that children don't parse the same field again\n        ancestorParse.copyAll(parse);\n        // copy only non-null parses\n        var p = {};\n        for (var _d = 0, _e = util_1.keys(parse.combine()); _d < _e.length; _d++) {\n            var key = _e[_d];\n            var val = parse.get(key);\n            if (val !== null) {\n                p[key] = val;\n            }\n        }\n        if (util_1.keys(p).length === 0 || ancestorParse.parseNothing) {\n            return null;\n        }\n        return new ParseNode(parent, p);\n    };\n    Object.defineProperty(ParseNode.prototype, \"parse\", {\n        get: function () {\n            return this._parse;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParseNode.prototype.merge = function (other) {\n        this._parse = tslib_1.__assign({}, this._parse, other.parse);\n        other.remove();\n    };\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n    ParseNode.prototype.assembleFormatParse = function () {\n        var formatParse = {};\n        for (var _i = 0, _a = util_1.keys(this._parse); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var p = this._parse[field];\n            if (util_1.accessPathDepth(field) === 1) {\n                formatParse[field] = p;\n            }\n        }\n        return formatParse;\n    };\n    // format parse depends and produces all fields in its parse\n    ParseNode.prototype.producedFields = function () {\n        return vega_util_1.toSet(util_1.keys(this._parse));\n    };\n    ParseNode.prototype.dependentFields = function () {\n        return vega_util_1.toSet(util_1.keys(this._parse));\n    };\n    ParseNode.prototype.assembleTransforms = function (onlyNested) {\n        var _this = this;\n        if (onlyNested === void 0) { onlyNested = false; }\n        return util_1.keys(this._parse)\n            .filter(function (field) { return onlyNested ? util_1.accessPathDepth(field) > 1 : true; })\n            .map(function (field) {\n            var expr = parseExpression(field, _this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            var formula = {\n                type: 'formula',\n                expr: expr,\n                as: util_1.removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        }).filter(function (t) { return t !== null; });\n    };\n    return ParseNode;\n}(dataflow_1.DataFlowNode));\nexports.ParseNode = ParseNode;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":245}},"hash":"b8d8bb497937be21ac389d0c6cee1108","cacheData":{"env":{}}}