{"dependencies":[{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/package.json","includedInParent":true,"mtime":1534047879038},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/.babelrc","includedInParent":true,"mtime":1528828036274},{"name":"/Users/yaakov/tfjs-examples-modified/Assignmnet2-3/node_modules/vega-lite/build/src/package.json","includedInParent":true,"mtime":499162500000},{"name":"../../channel","loc":{"line":3,"column":24}},{"name":"../../log","loc":{"line":4,"column":18}},{"name":"../../scale","loc":{"line":5,"column":22}},{"name":"../../util","loc":{"line":6,"column":19}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar util = require(\"../../util\");\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nfunction scaleType(specifiedType, channel, fieldDef, mark, scaleConfig) {\n    var defaultScaleType = defaultType(channel, fieldDef, mark, scaleConfig);\n    if (!channel_1.isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (specifiedType !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!scale_1.channelSupportScaleType(channel, specifiedType)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!scale_1.scaleTypeSupportDataType(specifiedType, fieldDef.type, fieldDef.bin)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        return specifiedType;\n    }\n    return defaultScaleType;\n}\nexports.scaleType = scaleType;\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark, scaleConfig) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (channel_1.isColorChannel(channel) || channel_1.rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n                if (mark === 'bar') {\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (channel_1.isColorChannel(channel)) {\n                return 'sequential';\n            }\n            else if (channel_1.rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (channel_1.isColorChannel(channel)) {\n                if (fieldDef.bin) {\n                    return 'bin-ordinal';\n                }\n                // Use `sequential` as the default color scale for continuous data\n                // since it supports both array range and scheme range.\n                return 'sequential';\n            }\n            else if (channel_1.rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            // x and y use a linear scale because selections don't work with bin scales.\n            // Binned scales apply discretization but pan/zoom apply transformations to a [min, max] extent domain.\n            if (fieldDef.bin && channel !== 'x' && channel !== 'y') {\n                return 'bin-linear';\n            }\n            return 'linear';\n        case 'latitude':\n        case 'longitude':\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/type.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/scale/type.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar util = require(\"../../util\");\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nfunction scaleType(specifiedType, channel, fieldDef, mark, scaleConfig) {\n    var defaultScaleType = defaultType(channel, fieldDef, mark, scaleConfig);\n    if (!channel_1.isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (specifiedType !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!scale_1.channelSupportScaleType(channel, specifiedType)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!scale_1.scaleTypeSupportDataType(specifiedType, fieldDef.type, fieldDef.bin)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        return specifiedType;\n    }\n    return defaultScaleType;\n}\nexports.scaleType = scaleType;\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark, scaleConfig) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (channel_1.isColorChannel(channel) || channel_1.rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n                if (mark === 'bar') {\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (channel_1.isColorChannel(channel)) {\n                return 'sequential';\n            }\n            else if (channel_1.rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (channel_1.isColorChannel(channel)) {\n                if (fieldDef.bin) {\n                    return 'bin-ordinal';\n                }\n                // Use `sequential` as the default color scale for continuous data\n                // since it supports both array range and scheme range.\n                return 'sequential';\n            }\n            else if (channel_1.rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            // x and y use a linear scale because selections don't work with bin scales.\n            // Binned scales apply discretization but pan/zoom apply transformations to a [min, max] extent domain.\n            if (fieldDef.bin && channel !== 'x' && channel !== 'y') {\n                return 'bin-linear';\n            }\n            return 'linear';\n        case 'latitude':\n        case 'longitude':\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":98}},"hash":"5674aa42ba6ed1207f9d298b3e9950ec","cacheData":{"env":{}}}