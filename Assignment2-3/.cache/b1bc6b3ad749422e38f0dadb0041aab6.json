{"dependencies":[{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\package.json","includedInParent":true,"mtime":1537759548368},{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\.babelrc","includedInParent":true,"mtime":1536780611616},{"name":"C:\\Users\\choff\\Desktop\\fall18\\6.s198\\Assignment2-3\\node_modules\\@tensorflow\\tfjs-core\\package.json","includedInParent":true,"mtime":1529543031000},{"name":"../doc","loc":{"line":9,"column":20}},{"name":"../environment","loc":{"line":10,"column":28}},{"name":"../util","loc":{"line":11,"column":19}},{"name":"./array_ops","loc":{"line":12,"column":26}},{"name":"./binary_ops","loc":{"line":13,"column":27}},{"name":"./compare","loc":{"line":14,"column":24}},{"name":"./logical_ops","loc":{"line":15,"column":28}},{"name":"./operation","loc":{"line":16,"column":26}}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar binary_ops_1 = require(\"./binary_ops\");\nvar compare_1 = require(\"./compare\");\nvar logical_ops_1 = require(\"./logical_ops\");\nvar operation_1 = require(\"./operation\");\nvar SegmentOps = (function () {\n    function SegmentOps() {\n    }\n    SegmentOps.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n        util.assertArgumentsAreTensors({ x: x, segmentIds: segmentIds }, 'unsortedSegmentSum');\n        util.assert(segmentIds.dtype === 'int32', 'segmentIds must be of dtype `int32`');\n        util.assert(util.isInt(numSegments), 'numSegments must be of dtype int');\n        var gradFunc = function (dy) {\n            var derX = function () {\n                return gatherDropNegatives(dy, segmentIds);\n            };\n            return { x: derX };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.unsortedSegmentSum(x, segmentIds, numSegments);\n        }, { x: x }, gradFunc);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Segment' }),\n        operation_1.operation\n    ], SegmentOps, \"unsortedSegmentSum\", null);\n    return SegmentOps;\n}());\nexports.SegmentOps = SegmentOps;\nfunction gatherDropNegatives(x, indices) {\n    var zeroClippedIndices = binary_ops_1.BinaryOps.maximum(indices, array_ops_1.ArrayOps.zerosLike(indices));\n    var gathered = array_ops_1.ArrayOps.gather(x, zeroClippedIndices);\n    var isPositive = compare_1.CompareOps.greaterEqual(indices, array_ops_1.ArrayOps.scalar(0, 'int32'));\n    var numIters = gathered.rank - isPositive.rank;\n    for (var i = 0; i < numIters; ++i) {\n        isPositive = array_ops_1.ArrayOps.expandDims(isPositive, i + 1);\n    }\n    isPositive =\n        logical_ops_1.LogicalOps.logicalAnd(isPositive, array_ops_1.ArrayOps.ones(gathered.shape, 'bool'));\n    var zeroSlice = array_ops_1.ArrayOps.zerosLike(gathered);\n    return logical_ops_1.LogicalOps.where(isPositive, gathered, zeroSlice);\n}\n//# sourceMappingURL=segment_ops.js.map","map":{"mappings":[{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules\\@tensorflow\\tfjs-core\\dist\\ops\\segment_ops.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = require(\"../doc\");\nvar environment_1 = require(\"../environment\");\nvar util = require(\"../util\");\nvar array_ops_1 = require(\"./array_ops\");\nvar binary_ops_1 = require(\"./binary_ops\");\nvar compare_1 = require(\"./compare\");\nvar logical_ops_1 = require(\"./logical_ops\");\nvar operation_1 = require(\"./operation\");\nvar SegmentOps = (function () {\n    function SegmentOps() {\n    }\n    SegmentOps.unsortedSegmentSum = function (x, segmentIds, numSegments) {\n        util.assertArgumentsAreTensors({ x: x, segmentIds: segmentIds }, 'unsortedSegmentSum');\n        util.assert(segmentIds.dtype === 'int32', 'segmentIds must be of dtype `int32`');\n        util.assert(util.isInt(numSegments), 'numSegments must be of dtype int');\n        var gradFunc = function (dy) {\n            var derX = function () {\n                return gatherDropNegatives(dy, segmentIds);\n            };\n            return { x: derX };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.unsortedSegmentSum(x, segmentIds, numSegments);\n        }, { x: x }, gradFunc);\n    };\n    __decorate([\n        doc_1.doc({ heading: 'Operations', subheading: 'Segment' }),\n        operation_1.operation\n    ], SegmentOps, \"unsortedSegmentSum\", null);\n    return SegmentOps;\n}());\nexports.SegmentOps = SegmentOps;\nfunction gatherDropNegatives(x, indices) {\n    var zeroClippedIndices = binary_ops_1.BinaryOps.maximum(indices, array_ops_1.ArrayOps.zerosLike(indices));\n    var gathered = array_ops_1.ArrayOps.gather(x, zeroClippedIndices);\n    var isPositive = compare_1.CompareOps.greaterEqual(indices, array_ops_1.ArrayOps.scalar(0, 'int32'));\n    var numIters = gathered.rank - isPositive.rank;\n    for (var i = 0; i < numIters; ++i) {\n        isPositive = array_ops_1.ArrayOps.expandDims(isPositive, i + 1);\n    }\n    isPositive =\n        logical_ops_1.LogicalOps.logicalAnd(isPositive, array_ops_1.ArrayOps.ones(gathered.shape, 'bool'));\n    var zeroSlice = array_ops_1.ArrayOps.zerosLike(gathered);\n    return logical_ops_1.LogicalOps.where(isPositive, gathered, zeroSlice);\n}\n//# sourceMappingURL=segment_ops.js.map"},"lineCount":54}},"hash":"0aa380a1f8d54687c1c3a94026551bb3","cacheData":{"env":{}}}