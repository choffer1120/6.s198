<!-- Contributed by David Bau, in the public domain -->

<template>
<div class="vectorlist">
  <div v-for="(vector, index) in vectors" class="vector">
    <input v-model="vector.text">
    <button @click="selectVector(index)">&rarr;</button>
    <button @click="deleteVector(index)">x</button>
  </div>
  <div class="operation">
  <button @click="saveVector()">Save current sample</button>
  </div>
  <div class="operation">
  <!-- TODO: Change this button to do something interesting -->
  <button @click="applyVectorMath()">Apply vector math</button>
  </div>
  <!-- TODO: Add the KNN font ID button below -->
  <button @click="getKNN()">Find Nearest Neighbors</button>

  <button @click="findAvgFont()">Find Average Font</button>
</div>
</template>

<script>
import {Array1D, ENV} from 'deeplearn';

const math = ENV.math;

//This json file includes all of the Font IDs in our database and their 40-dimensional logits vector.
var json = require('../embeddings.json');

export default {
  props: {
    selectedSample: { },
    model: { },
    vectors: { type: Array, default: () => [ { text: "0" } ] }
  },
  methods: {
    saveVector() {
      this.selectedSample.data().then(x =>
         this.vectors.push({ text: Array.prototype.slice.call(x).join(',') })
      );
    },
    deleteVector(index) {
      this.vectors.splice(index, 1);
    },
    selectVector(index) {
      this.$emit("select", { selectedSample: this.model.fixdim(
           Array1D.new(this.vectors[index].text.split(',').map(parseFloat)))});
    },
    // TODO: Add useful vector space operations here -->
    applyVectorMath() {
      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))) } )
      console.log(this.vectors);
      let starter = this.vectors[0].text.split(',').map(parseFloat);
      let added = this.vectors[1].text.split(',').map(parseFloat);

      for(let j = 0; j < starter.length; j++) {
        starter[j] += added[j];
      }

      console.log(starter);
    },

    //TODO: Implement getKNN to output the font ID of the nearest neighbor
    getKNN() {
      let bestScore = 0;
      let bestFont = 0;
      let input = this.vectors[this.vectors.length - 1].text.split(',').map(parseFloat);
      
      for(let i = 0; i < json.length; i++) {
        let dotProd = 0;
        let jsonNorm = 0;
        let inputNorm = 0;
        for(let j = 0; j < json[i].length; j++) {
          dotProd += json[i][j] * input[j];
          jsonNorm += json[i][j] * json[i][j];
          inputNorm += input[j] * input[j];
        }

        dotProd = Math.abs(dotProd);
        jsonNorm = Math.sqrt(jsonNorm);
        inputNorm = Math.sqrt(jsonNorm);

        let cosineDist = dotProd/(jsonNorm * inputNorm);
        if(cosineDist > bestScore){
          bestScore = cosineDist;
          bestFont = i;
        }
      }

      console.log('Best Font ID:');
      console.log(bestFont);
      console.log('Best Font Cosine Score:');
      console.log(bestScore);
    },

    findAvgFont() {
      let avgFont = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
      for(let i = 0; i < json.length; i++) {
        for(let j = 0; j < json[i].length; j++) {
          avgFont[j] += json[i][j]
        }
      }

      for(let j = 0; j < avgFont.length; j++) {
        avgFont[j] = avgFont[j]/json.length;
      }

      console.log(avgFont);
    },

  },
  watch: {
    model: function(val) {
      for (let i = 0; i < this.vectors.length; ++i) {
        let arr = this.vectors[i].text.split(',');
        if (arr.length > this.model.dimensions) {
            arr = arr.slice(0, this.model.dimensions);
        }
        while (arr.length < this.model.dimensions) {
            arr.push('0');
        }
        this.vectors[i].text = arr.join(',');
      }
    }
  },
}
</script>

<style scoped>
.vector, .operation {
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  white-space: nowrap;
}

</style>
